* Computing Magic Beta Module 1c

/Animating Your Lisp/

Mars, Monday 24 January 2022

Based on notes from a [[https://github.com/GregDavidson/computing-magic#readme][Computing Magic]] [[mars-beta-notes.org][Beta Course]] Meeting.

** What to do before this module

Complete the [[https://docs.racket-lang.org/quick/][Quick Tutorial]] through Step 8.  See [[file:../Module-1/module-1.org][Module 1]].

** I'm Ready to Create Games!

Racket is blessed with a great deal of Tutorials, Libraries and other resources
to leverage in designing and creating your own games.

*** How to Design Programs (HtDP) covers Game Basics!

The highly-recommended book [[https://htdp.org/2020-8-1/Book/index.html][How to Design Programs (2nd Edition)]] covers
fundamental techniques of how to write Games, namely
- Creating and manipulating images to use
- Animation (Generating Frames synched with time)
- Responding to Events (keyboard & Pointer events)

Game programming techniques start at the end of the Prologue. If you're already
familiar with the basics of Racket or any other Lisp, I recommend skimming over
the early material until you get to the first use of the image datatype. (You
can search for 2htdp/image to find where that is.) Read and try out the code
from that point to the end of the Prologue.

While the Prologue gives you some initial exposure, you'll want to keep
following the book as there's more you'll need to learn to write games.

You'll be making extensive use of the powerful [[file:///usr/share/doc/racket/teachpack/2htdp2htdp.html][HtDP/2e Teachpacks]].

By the way, HtDP doesn't initially use the full Racket Language. It has you
start with a subset of Racket called BSL: the /Beginning Student Language/ which
you can access from the Languages menu in DrRacket. BSL is intended to make
creating your early programs easier so you can get ready for the more advanced
techniques sooner. This and a few other important points are explained in the
/Preface/.

* How to Design Worlds Continues the Adventure

[[https://world.cs.brown.edu/1][How to Design Worlds]] builds on the material in /How to Design Programs/
- [[https://world.cs.brown.edu/1/htdw-v1.pdf][PDF of Booklet]]
- [[https://world.cs.brown.edu/1/projects][Project Materials]]

After working through the exercises in /How to Design Worlds/ you should be able
to design some truly awesome games!

*** Realm of Racket

Realm of Racket is a (non-free) book and a curriculum
- [http://realmofracket.com/

Realm of Racket has you
- Write a series of game programs
- the games gradually increase in sophistication
- writing each game teaches you more skills

[[https://www.youtube.com/@realmofracket/videos][Short and kinda silly Realm of Racket Videos]]

*** Eric Clack's Example Games

Study the games at Eric Clack's wonderful [[https://github.com/ericclack/racket-examples#racket-examples][racket-examples]] repository
- He provides the series of versions in the development of each game!
- git clone https://github.com/ericclack/racket-examples.git
- For each game
      - Run the final version, then some earlier versions
      - For each version, from first to last
            - Study the code and its evolution
            - Make sure you understand how everything works
      - Modify the last version in ways that you find interesting
- Using your new understanding, write some cool games!

** Everything's Changing: AR/VR/XR & Ray Tracing & Distributed Worlds

Most of today's computer games and user environments use flat display screens
and keyboards, mice (or trackpads, etc.) and maybe game controllers.

Today's bitmapped graphics uses labor-intensive artistic imaging techniques to
look good.

All of this is becoming obsolete!

[[https://youtu.be/TX9qSaGXFyg?si=eHRj5jeutv84RTJS][Apple's Vision Pro]] is the first of many all-around decent Augmented Reality
displays soon to come. The main drawback to the Vision Pro is its bulk. Within a
year of its release we should see comparable devices with half the bulk and
wearable for a full working day. Soon after that we should have AR devices
comparable to a pair of sport sunglasses.

Simultaneously we are experiencing the emergence of affordable [[https://www.digitaltrends.com/computing/what-is-ray-tracing][Real-Time Ray
Tracing]]. Creators of games and other visual content can now concentrate almost
exclusively on their world modeling, leaving most of the work of rendering the
graphics for the eyes of the viewers to these advanced algorithms. The cost of
this technology is rapidly decreasing. Games being created now are already
counting on it.

The advantages of these technologies are well known as they've been available
- at a very high price point - for decades. What's new is their rapid decrease
in price and their refinement for ease of use as they move into the mainstream.

The best way to get ready for these new technologies is to study the basics of
World Design and keep an eye on (or help out with) the recreation of frameworks
similar to [[https://en.wikipedia.org/wiki/Croquet_Project][Open Croquet]].

** More Game-Relevant Resources

Learn game-relevant [[https://docs.racket-lang.org/index.html][Racket Resources]] including
- More 2-D Graphics
      - [[https://docs.racket-lang.org/pict/][Pict 2D]]
      - [[https://docs.racket-lang.org/mode-lambda/][Mode-Lambda]]
- 3-D Graphics
      - [[https://docs.racket-lang.org/sgl/][OpenGL 3-D Graphics]]
- Sound
      - [[https://docs.racket-lang.org/rsound/index.html][RSound Sound Engine]]
- Graphical Application Frameworks
      - [[https://docs.racket-lang.org/framework/index.html][Framework]]
      - [[https://docs.racket-lang.org/gui/][Graphical Interface Toolkit]]
- Game Frameworks
      - [[https://docs.racket-lang.org/rilouworld/][Rilouworld Decentralized Game Universe]]

** What else might you do?

This course is self-paced, so feel free to continue on to [[file:../README.org][other modules]]!

You might also want to [[file:../../Racket/learn-racket.org][Learn (More) Racket]]!

You might want to explore creating games using other languages
- [[https://blog.logrocket.com/5-rust-game-engines-consider-next-project/][5 Rust Game Engines]]

As your game project gets more complex, you might want
- [[file:../Module-2/module-2.org][Module-2: Software Development Power Tools]]
- with Emacs, Git, OrgMode, Scripting!

If you start building client/server games, you may want to study the
Socket-based and Web-based client-server examples and exercises in [[file:~/Gits/Computing-Magic/Modules/Module-4/Code-Examples/README.org][Racket
Client/Server Programming]]

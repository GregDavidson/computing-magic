* Falling To Flying - Adding State

** Richer Behavior Requires A Richer State

If we'd like our ball to exhibit more interesting behavior, e.g.
- accelerate it's fall based on gravity
- change shape when it hits the bottom
- bounce!
- move horizontally as well as vertically

Then we'll need to give our ball a richer state. Our current "world state" is
just a single number representing the height of the ball. We can create a richer
state using a list of attributes or more conveniently by using a =struct= form.

** Defining Functions to Manage A Richer State

We could define a richer state as a list of attributes managed by a collection
of functions:
#+begin_src racket
  (define (make-ball shape y dy)
    (list shape y dy) )
  (define (ball-shape ball) (first ball))
  (define (ball-y ball ) (second ball))
  (define (ball-dy ball ) (third ball))
  (define world (make-ball BALL SCENE-HEIGHT DROP-RATE))
#+end_src
- =make-ball= is called a /constructor function/
- =ball-shape=, =ball-y= and =ball-dy= are called /selector functions/

Rather than creating new functions, the selector functions can be more easily
defined as alternative names for the existing list functions:
#+begin_src racket
  (define ball-shape first) ; fetches first element of the list
  (define ball-y second ball) ; fetches second element of the list
  (define ball-dy third) ; etc.
#+end_src

** Using the =struct= Macro to Manage A Richer State

A shorter and more efficient way to write all of the ball functions is to have
the Racket macro =struct= write these functions for us:
#+begin_src racket
  (struct ball (shape y dy)
    #:constructor-name make-ball )
#+end_src
This =struct= form writes five functions for us:
- a /selector function/ for each /field/
      - =ball-shape=, =ball-y= and =ball-dy=
- a recognizer function
      - =ball?= :: returns =#t= for a ball structure, =#f= for anything else
- a constructor function
      - The default constructor function name would have been =ball=
      - The optional clause =#:constructor-name make-ball=
            - changes it to the (possibly more clear) =make-ball=

Structures are usually stored more efficiently than lists.

Functions are procedures which take their inputs as arguments and return a
single value as a result. Procedures can instead take some or all of their input
from global state and modify global state instead of (or in addition to)
returning one or more values. Functions are generally considered the best kind
of procedures.

Lisp does nearly everything with procedures, including functions. A
well-designed macro can often write many of the procedures we need
automatically. Macros are also procedures but they run when your program is
being prepared (compiled) and their return value(s) replace the original form.
If you find yourself writing a lot of obvious or repetitious code (often called
boilerplate) you might want to generate it with a macro!

** Your Program with a Richer State

Using one of the methods presented above to manage state
- Create a new version of the falling-to-flying program
- You'll need to change =next-world= and =draw-world=

#+begin_src racket
(define (next-world world)
  (make-ball (ball-shape world) ; same shape
              (remainder (+ (ball-y world) (ball-dy world)) SCENE-HEIGHT) ; new y
              (ball-dy world) ; same dy
              ) )

     (define (draw-world world)
       (place-image BALL HALF-SCENE-WIDTH world EMPTY-SCENE) )
#+end_src

Your new version of the programs should work just as before, but with the richer
state, you can get it to do more tricks!

Ideally you won't need to look at our solution until
you have your own working solution to compare it with.
If you get stuck, reach out to someone who's solved this
problem already and see if they can give you some feedback
that will help you get the new version with richer state
working.

Here's our new version with the richer state:
- [[file:Solutions/falling-to-flying+state.rkt][falling-to-flying+state.rkt]]
It's fine if you did it differently, and what can
you learn from comparing your solution with this one?

** Adding Gravity

Try having your ball accelerate due to gravity as soon as it
emerges onto the scene.  Here's are some utility function and
constants which you may find helpful in getting your main functions
working right.


#+begin_src racket
(define (half num-pixels) (quotient num-pixels 2))

(define SCENE-WIDTH 400) ; pixels
(define HALF-SCENE-WIDTH (half SCENE-WIDTH))
(define SCENE-HEIGHT 400) ; pixels
(define EMPTY-SCENE (empty-scene SCENE-WIDTH SCENE-HEIGHT))


;; have the ball move at a fixed slow speed until it fully
;; emerges into the scene.  Then let gravity accelerate it!
(define EMERGING-DY -1)
;; Gravity near the earth creates an acceleration which adds
;; about 10 meters/second to the downwards velocity of an object.
;; If y is the height above ground, dy is the downwards velocity
;; and gravity is then a ddy, i.e. a change in dy.
;; If we let every pixel equal a meter, then gravity would be a
;; ddy of 10 every 30 ticks, since we tick 30 times a second.
(define GRAVITY (- (/ 10 30)))
;; A non-integer gravity will mean that dy and y won't always
;; be an integer, so be sure to round y before placing the ball!

;; is the ball emerging from the top of the scene?
(define (emerging? ball)
(< (- SCENE-HEIGHT (ball-y ball)) HALF-BALL-HEIGHT) )

;; is the ball bouncing?
(define (bouncing? ball)
(< (ball-y ball) HALF-BALL-HEIGHT) )
#+end_src

Ideally you won't need to look at our solution until
you have your own working solution to compare it with.
If you get stuck, reach out to someone who's solved this
problem already and see if they can give you some feedback
on what you've done so far or how you're going about solving
the problem.

If you're stuck on just one of the functions you need
and you want to see just that one from our solution,
here they are:
- [[file:Solutions/falling-to-flying+gravity-next-world.rkt][next-world]]
- [[file:Solutions/falling-to-flying+gravity-draw-world.rkt][draw-world]]

And finally, here's our solution
- [[file:Solutions/falling-to-flying+gravity.rkt][falling-to-flying+gravity.rkt]]
It's fine if you did it differently, and
what can you learn from comparing the two?

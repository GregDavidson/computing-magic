* Issues

** Giving source files their own REPL

Add this to the top of the source file:

;; (setq-local racket-repl-buffer-name "*sprites-worlds-client-repl*")

and then run eval-last-sexp with point at the end of that line.

Do this BEFORE using the shared REPL!

** An easier message format

(action world-id proxy (or/c sprite-proxy sprite-id?))
- Find the world-id/sprite-id slot

 | Existing-Slot | proxy                     | id                      |
 |---------------+---------------------------+-------------------------|
 | #f            | create a new sprite       | do nothing              |
 | occupied      | mutate an existing sprite | drop an existing sprite |


** id-partially-applied

This can be caused by a predicates in the contracts being specified is not
already known. They must be known /before/ the current /require/ form. So use an
initial require form to bring all of those predicates in, then use a second
require form to specify contracts for everything else.

*** Provisional Bug Report:

title:

Need clue: Error "id-partially-applied49.1 undefined", no such symbol in my source!

body:

sprites-worlds-game.rkt brings in
```
#lang racket/base
(require racket/math
         racket/list
         racket/set
         racket/bool
         racket/function
         racket/stream
         data/gvector )
```
Thanks for any help locating where to look!

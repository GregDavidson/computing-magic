* Issues

** Bug

The second client dies.  Is this similar to the old problem of
not knowing how to deal with updates of uncreated sprites?

** Finishing up Refactoring

- params need to be more like clojures
      - proxies for procedures needing world-specific parameters could provide a
        form with the procedure name and the needed parameters
            - this could be turned into a clojure
- Review names of files
      - sprites-framework.rkt sprites-client-framework.rkt
      - universe-server.rkt network-volley-game.rkt
      - sprites-framework.org sprites-client-framework.org
      - universe-server.org network-volley-game.org
- Delete any comments no longer necessary
- Put provides forms in parallel tree structure with definitions
- What command-line code can go in the framework?
- Somehow move ball and SPRITE-0 code into network-volley-game.rkt
- Can we move the state code into network-volley-game.rkt ??
- How can we make everything in the client-framework extensible?
      - Extensible structures
      - Extensible/overridable procedures

** Import/Export Issues

(struct-out) forms don't export all components of extended structures.
- Obtaining the structure id binding via (struct-out) seems to sometimes be
  unreliable even with simple structures.

Example error message:
#+begin_example
https://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct-out%29%29 says:
if the identifier has a transformer binding of structure-type information, the accessor and mutator bindings of the super-type are not included by struct-out for export.
#+end_example

;; *** Client-Server message Types

There is no corresponding (struct-in) form or equivalent.

Any structure predicates needed by (contract-in) forms must be required earlier
in the top-level definitions of the module.

Resulting Policy:
- Use (struct-out) forms on simple structures which are not going to be extended
  in an importing module.
- Explicitly (provide) all components of a structure type required by other modules.
      - Document such with a commented-out (struct-out) form.  Perhaps someday it will work!
- Explicitly (require) all required components of a structure type
      - Require all structure predicates in a single earlier place.
      - Document the others with a commented-out (struct-in) form. Perhaps
        someday it will work! (Would you like to make it work??)

** Giving source files their own REPL

Add this to the top of the source file:

;; (setq-local racket-repl-buffer-name "*sprites-worlds-client-repl*")

BEFORE using the shared REPL, run the emacs command
- M-x eval-last-sexp
- with point at the end of that line.

Surely there's a better way to accomplish this??

** How to interpret action messages

- params :: struct (world [world-id?], ...)
- message :: struct (world [or/c world-id? params?])
- message-world :: (-> message? world-id?)
- update? :: (or/c sprite-id? sprite-proxy?)
- actions :: struct message (updates [listof update?])
- When (sprite-id? update)
      - drop that sprite from its world
- When (sprite-proxy? update)
      - update or create the indicated sprite
      - pass the params structure to the update or create procedure

- Find the world-id/sprite-id slot

 | Existing-Slot | proxy                     | id                      |
 |---------------+---------------------------+-------------------------|
 | #f            | create a new sprite       | do nothing              |
 | occupied      | mutate an existing sprite | drop an existing sprite |


** Interpreting Racket Error Messages

*** id-partially-applied

This can be caused by a predicates in the contracts being specified is not
already known. They must be known /before/ the current /require/ form. So use an
initial require form to bring all of those predicates in, then use a second
require form to specify contracts for everything else.

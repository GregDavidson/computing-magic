* Issues

** Giving source files their own REPL

Add this to the top of the source file:

;; (setq-local racket-repl-buffer-name "*sprites-worlds-client-repl*")

BEFORE using the shared REPL, run the emacs command
- M-x eval-last-sexp
- with point at the end of that line.

** How to interpret action messages

- params :: struct (world [world-id?], ...)
- message :: struct (world [or/c world-id? params?])
- message-world :: (-> message? world-id?)
- update? :: (or/c sprite-id? sprite-proxy?)
- actions :: struct message (updates [listof update?])
- When (sprite-id? update)
      - drop that sprite from its world
- When (sprite-proxy? update)
      - update or create the indicated sprite
      - pass the params structure to the update or create procedure

- Find the world-id/sprite-id slot

 | Existing-Slot | proxy                     | id                      |
 |---------------+---------------------------+-------------------------|
 | #f            | create a new sprite       | do nothing              |
 | occupied      | mutate an existing sprite | drop an existing sprite |


** Interpreting Racket Error Messages

*** id-partially-applied

This can be caused by a predicates in the contracts being specified is not
already known. They must be known /before/ the current /require/ form. So use an
initial require form to bring all of those predicates in, then use a second
require form to specify contracts for everything else.

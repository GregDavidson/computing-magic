* Multiple Worlds Sprites Game Protocol and Overview

** Key Concepts

World Program aka "a client"
- controlled by one user
- runs on that user's computer
- connects to a universe server

Universe Server aka "the server"
- connects a collection of worlds
- coordinates them in playing a game together

Sprite
- A graphical object with
      - A shape - which might change!
      - A unique identity
      - A location and velocity
      - Reponses to certain key presses
- Often visible in multiple worlds
- Sprites might interact!

Although a Sprite is often visible in more than one world, it will initially
only receive Events (Tick, Key, Pointer, etc.) from its home world.
- If the game logic desires it
      - a Sprite could change its home
      - a Sprite could receive events from more than one World.

** A Simple Game

- Each world has its own unique World Number.
- Each world has its own unique Color.
- Each world has one Sprite of its Color.
- A new world will get one initial sprite.
- Initially all sprites are balls labeled with their World Number.
- The balls start at the top of the canvas and fall at a constant velocity.
- A sprite is lost if it reaches the edge of the canvas.
- Users can avoid this by giving a sprite "boosts".

As a User
- We see all Sprites of all Worlds.
- The up/down arrow keys to give our Sprite up/down velocity boosts
      - This can keep our Sprite from becoming lost.
- The left/right arrow keys to give our Sprite left/right velocity boosts
      - This can keep our Sprite out of a muddle of other world's Sprites.
- Velocity boosts will decay back to the original velocity, e.g. falling.
      - Careful boosting can keep our balls away from edges.
      - Over-boosting can cause balls to collide with the edges!

** EXERCISES: Enhancing the Game

Allow persistent velocity changes in any direction
- Our sprite structures are already designed for this!
- Add gravity to accelerate falling!

Gifting Sprites!
- Have an action to give our sprite to a world needing one
      - If no other world needs one we lose ours!
            - Maybe someone else passed them a sprite first!
      - If multiple worlds need one, a random one gets it.
      - If we successfully gave ours away
            - We gain a point and get a new Sprite!
- If all Worlds lose their Sprites
      - a random world will get a new Sprite

Eject Reaction Sprites to change velocity!
- They boost Sprite by Newtonian Physics
- Reaction Sprites
      - Do not otherwise affect the game play.
      - Are not controllable
      - Disappear when they leave the canvas

More possible Enhancements
- Allow diverse shapes for Sprites
      - Maybe after giving one away you get a more interesting new one!
- Allow some surfaces to Bounce Sprites
- Allow Sprites to interact with Sprites of other worlds
      - Momentum exchanges? Destructive interactions?

** Prefab Proxy Structures

We need to be able to send Sprite Attributes across Worlds.
- This information must be serialized
      - i.e. converted to/from a byte stream
- Alas, Racket doesn't provide for serialization of
      - regular structures, images or procedures

We'll need to create Serializable Proxies
- Converted from Sprite Structures and sent to the Universe Server
- Used to Create, Update and Drop Sprite Structures on receipt by a World

A serializable-struct can be serialized if all of its components can be
serialized.
- Alas, 2htdp/universe won't accept serializable structures!

A Prefab Structure can be serialized if all of its components can be
serialized.
- 2htdp/universe /does accept/ Prefab Structures!
- sprite-proxy will be a Prefab Structure

The fields of a sprite structure we want to change will be stored as a proxy
value in the corresponding sprite-proxy field.

Images will be represented either by
(1) a filesystem path to a stored image
(2) a symbol representing a function which
    takes a color and returns an image.

Procedures will be represented by their names (symbols).

Simple scalars (numbers, et al) will be stored as themselves.

A sprite-proxy will have the same uuid as the sprite it is a proxy for.
- Only the uuid field requires a proper value.
- The other fields can default to #f if the corresponding sprite field is irrelevant
      - e.g. not requiring an update.

** Messages

Messages between World Clients and the Universe Server are lists.
- Message Lists contain Action Symbols
- A W2U- prefix is used for Action Symbols in World to Universe messages
- A U2W- prefix is used for Action Symbols in Universe to World messages

World to Universe Actions
: (define W2U-EMPTY 'empty) ;  we've lost our spriteseee
: (define W2U-DONE 'done)  ; detach us!

Universe to World Actions
: (define U2W-WELCOME 'welcome)
- is sent to a new world after connecting to us
- is followed by an association list where
: (define WORLD-NUMBER-KEY 'world-number)
- a natural? number which uniquely identifies that world

You can attempt a solution to the Simplest Game yourself and/or you can look at
our solution and perhaps build on it.

The Simplest Multi-User Game with Sprites
- [[file:Solutions/sprites-worlds-game.rkt][sprites-worlds-game.rkt]]
- [[file:Solutions/sprites-worlds-server.rkt][sprites-worlds-server.rkt]]
- [[file:Solutions/sprites-worlds-client.rkt][sprites-worlds-client.rkt]]

[[file:Solutions/serialization-issues.org][More on Serialization Issues]]

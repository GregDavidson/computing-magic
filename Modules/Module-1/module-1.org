* Computing Magic Beta Module 1

/Acquiring a Lisp/

Based on a [[https://github.com/GregDavidson/computing-magic#readme][Computing Magic]] [[file:mars-beta-notes.org][Beta Course]] Meeting.

This Module introduces programming using
- a *Functional Programming Paradigm*
- writing Functional *Programs which Draw Pictures!*
- the programs and the pictures become progressively more interesting!
- This module provides much of interest
      - whether you're new to programming or an expert!

** Learning by Exploring

Programming is best learned by Exploring, that is to say
1. Read a bit, e.g. from a Tutorial
2. Replicate the examples
3. Experiment beyond the examples
       - try not to stray /too far/!
4. Look up a few things in the Reference Manual
       - take notes on interesting things
       - avoid going down /too many/ rabbit holes!
             - note them down for later exploration
5. Repeat with step 1!

See if you can line up some fellowship:
- One or more fellow learners also doing this course
- A /Peer Facilitator/ who's done this course recently
      - they're more useful than an "expert"

Explore the [[https://docs.racket-lang.org/quick/][Quick Tutorial]]
- As you try each example
      - Try variations
      - Play and Explore
- Allow yourself to get lost and confused
      - but don't stay that way!

** What else might you do?

After you've completed the tutorial through at least through Step 8
- Trying variations
- Looking up the features you've used
You now have some some impressive skills
- You can divide and conquer large complex problems
- You /get/ the #1 key to most advanced computing: functions

*** Do you want to get better at Racket or Lisp?

The program [[file:../../Racket/Tutorial-1-Pictures/after-quick.rkt][after-quick.rkt]] shows some variations on the code you explored with
the /Quick Tutorial/.

You might also want to learn [[file:../../Racket/more-racket.org][More Racket]]!

I've written about my long-term love affair with Lisp [[https://github.com/GregDavidson/on-lisp#readme][elsewhere]]!

Once you know a bit more, a really great way to gain more mastery is to
volunteer as a /Peer Facilitator/ for this course and/or this curriculum.

/Peer Facilitators/ assist other Learners
      - to immerse in the material
      - to find more related learning resources
      - and to get unstuck when they're unproductively stuck!
/Peer Facilitators/ are /not/ teachers!

*** Do you want to learn other kinds of Computing?

This course is self-paced, so feel free to continue on to [[file:../README.org][other modules]]!

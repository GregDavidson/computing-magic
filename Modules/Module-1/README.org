* Computing Magic Beta Module 1

/Acquiring a Lisp/

Based on a [[https://github.com/GregDavidson/computing-magic#readme][Computing Magic]] [[file:mars-beta-notes.org][Beta Course]] Meeting.

** The Context (you can read this later if you like)

This Module introduces programming using
- a *Functional Programming Paradigm*
- writing Functional *Programs which Draw Pictures!*
- the programs and the pictures become progressively more interesting!
- This module provides much of interest
      - whether you're new to programming or an expert!

Programming is best learned by Exploring, that is to say
1. Read a bit, e.g. from a Tutorial
2. Replicate the examples
3. Experiment beyond the examples
       - try not to stray /too far/!
4. Look up a few things in the Reference Manual
       - take notes on interesting things
       - avoid going down /too many/ rabbit holes!
             - note them down for later exploration
5. Repeat with step 1!

See if you can line up some fellowship:
- One or more fellow learners also doing this course
- A /Peer Facilitator/ who's done this course recently
      - they're more useful than an "expert"

** The Plan

1. Explore the [[https://docs.racket-lang.org/quick/][Quick Tutorial]]
2. As you try each example
       - Try variations
       - Play and Explore
3. Allow yourself to get lost and confused
       - but don't stay that way!

4. You're now staring to /get/ the #1 key to most advanced computing:
   /Functional Procedures/!

5. Now try this [[file:Exercises/Make-A-Face/make-a-face.rkt.org][Exercise: Make A Face in Racket]]

6. Study the program [[file:../../Racket/Tutorial-1-Pictures/after-quick.rkt][after-quick.rkt]] which shows some variations on the code you
   explored with the /Quick Tutorial/.

** Learning More Racket or Lisp

Here are resources to [[file:../../Racket/learn-racket.org][Learn (More and Better) Racket Programming]]!

I've written about my long-term love affair with Lisp [[https://github.com/GregDavidson/on-lisp#readme][HERE]]!

** Assisting Others Helps You Learn!

Once you know a bit more, a really great way to gain more mastery is to
volunteer as a /Peer Facilitator/ for this course and/or this curriculum.

/Peer Facilitators/ assist other Learners
      - to immerse in the material
      - to find more related learning resources
      - and to get unstuck when they're unproductively stuck!

/Peer Facilitators/ are /not/ teachers or experts!

** Continue With More /Computing Magic/

This course is self-paced, so feel free to continue on to [[file:../README.org][other modules]] as soon
as you feel ready!

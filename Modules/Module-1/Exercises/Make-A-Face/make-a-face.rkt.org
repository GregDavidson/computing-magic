* Exercise: Make A Face in Racket

This exercise is part of [[https://github.com/GregDavidson/computing-magic/blob/main/Modules/Module-1/module-1.org][Computing Magic Module-1]]

Learn
- Progressive Development
- Parameterization
- Use of Libraries
- and more!

Prerequisites
- [[https://docs.racket-lang.org/quick][Racket Quick Tutorial]]

/This is a progressive exercise:/
- *Look at only one step at a time!*
      - Best: Read this document with Emacs Org Mode
            - Fold and Unfold sections with TAB
      - Or a /Folding Version/ as a WebPage.
            - Not yet available for this document
      - Otherwise, try not to look ahead
            - Until you've tried things yourself!

** Step 1: Make an Eye Interactively

Look up the procedures 
- filled-ellipse
- disk
from [[https://docs.racket-lang.org/pict/Basic_Pict_Constructors.html][Basic Pict Constructors]] and
- cc-superimpose
from [[https://docs.racket-lang.org/pict/Pict_Combiners.html][Pict Combiners]]

Use these interactively to create a picture resembling an eye with iris and
pupil.

First make the parts of the picture one at a time, then nest them with
cc-superimpose to create the desired result.

*** Step 1: Example Solution

This is only an example illustrating a possible solution. Your solution might be
different from this example and still be just as good or better. The important
thing is that you're learning what you can do with nesting these and similar
forms.

#+begin_src racket
  (cc-superimpose
   (filled-ellipse 100 50 #:color "lightyellow")
   (disk 45 #:color "lightblue")
   (disk 15 #:color "black") ) 
#+end_src

** Step 2: Using A Parameterized Procedure

Turn a solution to Step 1 into a Parameterized Procedure.
- Turn all numbers into parameters
- Would it be nicer to make any of the numbers be ratios?
- Try using let or let* to temporarily bind values

Turn at least one of the colors into a parameter.

#+begin_src racket
  (define (make-eye YOUR PARAMETERS HERE)
    (cc-superimpose
     (filled-ellipse YOUR ARGUMENTS HERE)
     (disk YOUR ARGUMENTS HERE)
     (disk YOUR ARGUMENTS HERE) ) )
#+end_src

*** Step 2: First Example Solution

Usual Caveat that this is only one way to do it.

#+begin_src racket
  (define (make-eye eye-height eye-ratio iris-ratio pupil-ratio iris-color)
    (let* ( [eye-width (* eye-ratio eye-height)]
            [iris-size (* iris-ratio eye-height)]
            [pupil-size (* pupil-ratio iris-size)] )
      (cc-superimpose
       (filled-ellipse eye-width eye-height #:color "lightyellow")
       (disk iris-size #:color iris-color)
       (disk pupil-size #:color "black") ) ) )
#+end_src

#+begin_src racket
  ; Example call to make-eye
  (make-eye 100 2 4/5 2/5 "brown")
#+end_src

Call your procedure with different values for its parameters.
- How convenient is it to have so many parameters?

*** Step 2: Second Example Solution

Parameters make procedures more powerful and flexible. Yet during incremental
development lots of parameters can be awkward to work with, especially when
we're creating multiple procedures needing many of the same parameters.

Let's temporarily replace most parameters with global bindings:

#+begin_src racket
  ;; Define defaults for eye procedures
  (define eye-ratio 2)
  (define eye-iris-ratio 4/5)
  (define eye-pupil-ratio 2/5)
  (define eye-color "brown")
  (define eye-sclera-color "lightyellow")

  ;; Make 1 eye
  (define (make-eye eye-height)
    (let* ( [eye-width (* eye-ratio eye-height)]
            [iris-size (* eye-iris-ratio eye-height)]
            [pupil-size (* eye-pupil-ratio iris-size)] )
      (cc-superimpose
       (filled-ellipse eye-width eye-height #:color eye-sclera-color)
       (disk iris-size #:color eye-color)
       (disk pupil-size #:color "black") ) ) )
#+end_src

** Step 3: Build up to Making A Face

You're going to create a series of procedures. Later procedures will call some
of your earlier procedures. You will need to propagate parameter values
appropriately to the procedures which you're calling.

Suggested flow:
- Create a procedure for making two eyes.
      - optional first argument of append functions specifies spacing
- Create a procedure for making a nose
      - make it simple for now, e.g. a disk
- Create a procedure for making eyes + a nose
      - It should call your earlier two procedures
- Create a procedure for making a mouth
      - make it simple for now, e.g. a filled-ellipse
- Create a procedure for making eyes+nose+mouth
      - Calling your earlier procedures

Procedures you may find useful:
- pict-width from [[https://docs.racket-lang.org/pict/Pict_Datatype.html][Pict Datatype]]
- pin-over from [[https://docs.racket-lang.org/pict/Pict_Combiners.html][Pict Combiners]]

Some of these procedures will be
- taking the same optional arguments as the procedures they're calling
- passing these arguments on unchanged
We should not repeat default values
- we'll store them in global bindings for now
- this will create some redundancy
- but will allow us test each part separately
      - this is an example of *loose coupling*

Here's an example starting point:

#+begin_src racket
  ;; Define defaults for eye procedures
  (define eye-ratio 2)
  (define eye-iris-ratio 4/5)
  (define eye-pupil-ratio 2/5)
  (define eye-color "brown")
  (define eye-sclera-color "lightyellow")
  (define eye-spacing-ratio 1/3)

  (define (make-eye eye-height #:ratio [eye-ratio eye-ratio]
                    #:iris [iris-ratio eye-iris-ratio] #:pupil [pupil-ratio eye-pupil-ratio]
                    #:color [iris-color eye-color] #:sclera-color [sclera-color eye-sclera-color] )
    (let* ( [eye-width (* eye-ratio eye-height)]
            [iris-size (* iris-ratio eye-height)]
            [pupil-size (* pupil-ratio iris-size)] )
      (cc-superimpose
       (filled-ellipse eye-width eye-height #:color sclera-color)
       (disk iris-size #:color iris-color)
       (disk pupil-size #:color "black") ) ) )

  (define (make-eyes eye-height
                     #:spacing-ratio [spacing-ratio eye-spacing-ratio]
                     #:ratio [eye-ratio eye-ratio]
                     #:iris [iris-ratio eye-iris-ratio] #:pupil [pupil-ratio eye-pupil-ratio]
                     #:color [iris-color eye-color] #:sclera-color [sclera-color eye-sclera-color] )
    'YOUR-CODE-GOES-HERE! )
#+end_src


*** Step 3: Example Solution with Loose Coupling

Usual Caveat that this is only one way to do it:
- [[file:make-face-globals.rkt][make-face-globals.rkt]]
A solution like this would not be produced all at once!!!
- How is this different from what you did?
- What do you like about it?
- What don't you like about it?

** Step 4: Leveraging Named and Optional Parameters

Global bindings make it difficult to call our procedures with different
parameter values. Normally, we'd refactor our global bindings into parameters
for each procedure which needs those values. Because we have many procedures
which are only called from draw-face, we do something easier
- Move those procedures into the scope of draw-face
- Refactor the globals into parameters for procedure draw-face only!

We have an additional issue of how we can manage so many parameters.
Suppose we were to refactor draw-face like this:

#+begin_src racket
  (define (make-face face-height face-ratio color border-width
                     nose-mouth-ratio content-ratio face-eye-ratio
                     eye-ratio eye-spacing-ratio iris-ratio
                     pupil-ratio eye-color sclera-color nose-ratio
                     eye-nose-spacing face-mouth-ratio mouth-ratio
                     mouth-color)
  body-of-make-face )
#+end_src

and call it like this:

#+begin_src racket
  (draw-face 100 3/4 "tan" 2
             1/8 1/3 1/7
             2 1/3 4/5
             2/5 "brown" "lightyellow" 1/8
             0 1/8 1/4 "red" )
#+end_src

*** Problem 4.1: Too Many Positional Parameters!

These are /positional parameters/, so called because the parameter values match
up match up with their respective parameters by their position in the form. It's
considered /poor practice to have more than approximately 2 positional
paramters/ because people tend to mix them up!

- Strategy 4.1 :: Make most of them keyword parameters!

*** Problem 4.2: We Have To Specify Too Many Values!

Most of these parameters have good default values which
we'll usually want them to have.  We should only have to supply a value
for those parameters we want to change from its usual value.

- Strategy 4.2 :: Give default values where appropriate!

Look at the sections on
- Declaring Optional Arguments
- Declaring Keyword Arguments
in [[https://docs.racket-lang.org/guide/lambda.html][Racket Guide: Creating Procedures with Lambda]]

Good practice is to
- Require positional parameters for only a few essential parameters
- Use keywords to name additional parameters
- Make parameters optional where there's a single common default value

*** Step 4 Instructions

Starting with either your solution or the example solution above
1. Move the defintion of all of the procedures other than make-face inside the
   body of make-face.
2. Refactor the global bindings into named parameters of make-face with default
   values the same as they had when they were global bindings.

Define your procedure so that these are both legitimate calls:
#+begin_src racket
  (make-eye 100)
  (make-eye 100 #:color "brown" #:ratio 2 #:pupil 1/5)
#+end_src

**** Step 4 Hint 1: Named Parameters With Defaults

If we were only going to do this for procedure make-eye it might look something
like this:

#+begin_src racket
  (define (make-eye eye-height #:ratio [eye-ratio 2]
                #:iris [iris-ratio 4/5] #:pupil [pupil-ratio 2/5]
                #:color [iris-color "brown"]
                #:sclera-color [sclera-color "lightyellow"] )
  (let* ( [eye-width (* eye-ratio eye-height)]
          [iris-size (* iris-ratio eye-height)]
          [pupil-size (* pupil-ratio iris-size)] )
    (cc-superimpose
     (filled-ellipse eye-width eye-height #:color sclera-color)
     (disk iris-size #:color iris-color)
     (disk pupil-size #:color "black") ) ) )
#+end_src

But if we do this for each of our procedures, we're going to have a lot of
boiler plate passing lots of named parameters from one procedure to another.

**** Step 4 Hint 2: Structure of Nested Procedures

Your solution will probably look like this:

#+begin_src racket
  (define (make-face face-height
                     #:ratio [face-ratio 3/4]
                     ; the rest of the parameters go here
                     )

    (define (make-eye eye-height)
       'BODY-OF-MAKE-EYE )

    (define (make-eyes eye-height)
      (let ( [eye (make-eye eye-height)] )
        (hc-append (* eye-spacing-ratio eye-ratio eye-height) eye eye) ) )
 
    ;; internal defines of the rest of the procedures go here

    ;; body of make-face procedure goes here
    )
#+end_src

** Step 4 Example Solution: A Prettier Solution with Tighter Coupling

Usual Caveat that this is only one way to do it:
- [[file:make-face-nested-scopes.rkt][make-face-nested-scopes.rkt]]
- How is this different from what you did?
- What do you like about it?
- What don't you like about it?

** Step 4 Discussion: How can we have it all?

The example solution for Step 3 with most bindings global is very /hackable/
- You can explore the solution space experimentally in the REPL
- The parameters and their defaults are easy to modify
- Each function is easy to call independently

*** Using Racket and DrRacket Debuggers and REPL-based Development

One of the best things about Lisp (and some other interactive languages) is the
*REPL*
- *Reads* an S-Expression
- *Evaluates* the S-Expression in the Current Environment
- *Prints* its value
- in a *Loop*
- /generally the *Read* follows a *Prompt*, so maybe it's a *PREPL*!/

DrRacket is great for beginners
- DrRacket's /Interaction Window/ is a *REPL*.
- DrRacket also provides a simple [[https://docs.racket-lang.org/drracket/debugger.html][Graphical Debugging Interface]].

You can get a /Racket REPL/ by running the racket application at a /Command Prompt/
- *racket*
- the experience will be primitive!
 
You can get the most powerful /Racket REPL/ in an /Emacs Window/
- This is what the Racket developers use!
- As usual with Emacs, there's a learning curve!
      - [[https://docs.racket-lang.org/guide/Emacs.html][Emacs Modes for Racket]]
      - [[https://racket-mode.com/][Detailed Racket Mode Documentation]]

Traditional Lisps allow you to do
- full development from the REPL
- including in the middle of debugging
Racket is a bit more limited, but /Racket Mode/ in /Emacs/ gets close!

Racket also provides the [[https://docs.racket-lang.org/debug/index.html#%28part._debug-repl%29][debug/repl library and debug-repl function]]
- Gives you a REPL where you explicitly call =(debug-repl)=.
- Example: [[file:make-face-nested-debug-repl.rkt][make-face-nested-debug-repl.rkt]]

*** Class Objects

A different solution to the problem of lots of parameters is to group them into
/Class Objects/.
- /parameters/ are encapsulated into /fields/ in /objects/
- field values can be /inherited/ and /overridden/
This is usually called /Object-Oriented Programming/.

If you wind up using Racket for serious development projects
- you will want to learn about [[https://docs.racket-lang.org/guide/classes.html][Racket Classes and Objects]]

The Racket Graphics Toolkits uses these techniques and features.

*** More Extreme Nesting

Our example solution still has several bindings available in scopes where
they're not needed.

Instead of defining all of the subprocedures in the scope of make-face
- we could define them only in the scope of the procedure which calls them

Can you refactor your solution or our example solution to do that?

Here's an example solution to this challenge: [[file:make-face-maximally-nested.rkt][make-face-maximally-nested.rkt]]

The number of levels of nesting to use is a coding choice.
- When might multiple levels of nesting be beneficial?
- When is it more complexity than it's worth?

** Step Infinity: Complex Objects, e.g. Noses, Mouths, Eyelids, etc.

Once you determine what you want to be able to make you can select the right
tools from Racket's libraries.

*** Browsing the High-Level Libraries

There are more useful procedures in the pict library. Some of them are packaged
in sub-libraries and so they need a require form:

#+begin_src racket
  (require pict/color)

  (make-eye 30 #:color (light "aquamarine"))
#+end_src

Racket provides other easy-to-use high-level libraries for graphics, e.g.
Pict3D for creating 3D images.

Browse the section /GUI and Graphics Libraries/ in the
- [[https://docs.racket-lang.org][Racket Documentation Webpage]]

Two of the high-level graphics systems provide [[https://en.wikipedia.org/wiki/B%C3%A9zier_curve][Bézier Curves]] which can compactly
describe many complex curves and surfaces:
- [[https://docs.racket-lang.org/metapict/index.html#%28part._ref-bez%29][Bezier Curves]] in the [[https://docs.racket-lang.org/metapict/index.html][MetaPict Library]]
- [[https://docs.racket-lang.org/manual-sketching/Examples.html#%28part._example_bezier%29][Bezier]] in the [[https://docs.racket-lang.org/manual-sketching/index.html][Sketching Library/Language]]

See the second example in
- [[file:towards-a-better-nose.rkt][towards-a-better-nose.rkt]]

*** Learning the Lower-Level Racket Drawing Toolkit

Racket's high-level libraries are based on the lower level [[https://docs.racket-lang.org/draw/index.html][Racket Drawing Toolkit]]

If you find the existing high-level libraries too limited for
something you want to do, you can use the Racket Drawing Toolkit directly.

You can also use the Racket Drawing Toolkit selectively in combination with
higher level Racket libraries.

The Racket Drawing Toolkit leverages Racket's ability to do /Object Oriented
Programming/ to manage the complexity of low level graphics.

Here's the [[https://docs.racket-lang.org/draw/overview.html][Racket Drawing Toolkit Overview]]

See the first example in
- [[file:towards-a-better-nose.rkt][towards-a-better-nose.rkt]]

Notice that we're still using our familiar pict library so we can mix and match
high-level pict functions with the low-level Racket Drawing Toolkit features.

** Bitmaps

The Racket Making Library can create and manipulate Bitmaps directly.

Existing images in files can be loaded into bitmaps in several ways, e.g.
- (make-object bitmap% PATH-TO-FILE-AS-STRING KIND)
- where KIND is an image File Format identified by one of these symbols:
      - 'gif 'gif/mask 'gif/alpha
      - 'jpeg 'jpeg/alpha
      - 'png 'png/mask 'png/alpha
      - 'xbm 'xbm/alpha 'xpm 'xpm/alpha
      - 'bmp 'bmp/alpha

Bitmaps have a fixed resolution.

** SVG = Scalable Vector Graphics

The Racket Making Library can also work with SVGs which can be scaled to fit
any resolution.

The Racket Making Tookit can use SVGs by using the [[https://docs.racket-lang.org/draw/svg-dc_.html][Drawing Class svg-dc%]]

The making methods are the same as making on a bitmap, but the result is often
nicer.

** Consider 3D and Ray-Tracing

There are many techniques to give the appearance of 3D objects on flat screens,
including the flat screens built into "3D" Virtual Reality Headsets.

The best way to get excellent rendering of 3D objects is
- have the computer do it!
- try the Racket Library [[https://docs.racket-lang.org/pict3d/index.html][Pict3D]]

How might you make a 3D Face with Pict3D?

The latest and greatest technology for 3D graphics is [[https://en.wikipedia.org/wiki/Ray_tracing_(graphics)][Ray Tracing (Wikipedia)]]

Ray Tracing is very computationally intensive, but recent high-end consumer
graphics hardware increasingly has support for it. A number of people are
working on providing support for Ray Tracing in Graphics Libraries for Racket
and other languages and development environments.

The [[https://docs.racket-lang.org/images][Racket Images Library]] has emerging support for Ray Tracing.

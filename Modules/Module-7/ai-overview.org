* Overview of Artificial Intelligence

Part of [[https://github.com/GregDavidson/computing-magic#readme][Computing Magic]] [[file:README.org][Module 7]].

** What is Artificial Intelligence?

/Artificial Intelligence/ is any computing technology which exhibits skills
which, were they to be employed by a Human Being, we would consider a sign of
Intelligence. We do not count any behavior which is programmed in detail in
advance. The behavior should emerge from any program in a flexible and
appropriate manner similar to the emergence of intelligent behavior in a human
being.

/Intelligence/ in computer systems is as diverse as intelligence is in human
beings. I recommend reading [[https://en.wikipedia.org/wiki/Artificial_intelligence][Wikipedia on Artificial Intelligence]] and exploring
some of the links there to get an overall map of the field.

** Computing and Artificial Intelligence

Review [[https://github.com/GregDavidson/on-computing/tree/main#readme][On Computing]]
- especially [[https://github.com/GregDavidson/on-computing/blob/main/what-is-computing.org][What Is Computing?]]
      - especially the last section explaining
            - When to use AI Techniques and
            - *Why AI tends to produce the worst solutions!*

It is useful to contrast
(1) Conventional Computer Programming
(2) Machine Learning AI
(2) Explicit Knowledge-Based AI

In all cases there's some sort of Application Domain
- Recognizing Faces
- Driving Vehicles
- Tax Accounting
- Computer Gaming
- Spaceship Design
- etc., etc.

Different domains present wildly differing challenges for Programmers
- Different domains may require very different programming techniques.
- Many (most?) domains are beyond current abilities.
- AI techniques may or may not be helpful.

*** Conventional Computer Programming

tl/dr: Programmers translate domain knowledge into code. Depending on the
techniques used the behavior of the code may be easy to predict, hard to predict
or nearly impossible to predict without actually running the code on each
specific set of input data.

Programmers translate their understanding of a desired application in a domain
into programming code.
- This translation may be manual or partially automated
- Code is represented in one or more Computer Programming Languages.
- Code consists of Algorithms and Data
      - Algorithms consist of Expressions and/or Statements
      - Data is encoded as Data Structures
- /Understanding/ or /Knowledge/ is more-or-less /implicit/ in the code.
- Code is often accompanied by /comments/ and other /documentation/.
      - The code may behave differently than those descriptions!

The behavior of code may be fairly easy to predict when
- Designed using a /Declarative Programming Paradigm/
- Using /Static Typing/ and other /Static Constraints/
- Automated proof checking systems have checked then constraints
      - e.g. Compilers, Linters, Theorem Provers
- Good design and maintenance practices have been followed

The behavior of code may be difficult or impossible to predict
- other than by running it with each input data set
especially given
- Imperative Programming Paradigms
      - Complex control flow
      - Statements with side-effects
- Dynamic Typing
- Casual Maintenance
      - Bugs fixed and features added with patches
      - Programs growing greatly in size and complexity

*** Machine Learning: the "New AI"

In successful /Machine Learning/ Systems
- aka ML, LLMs (Large Language Models), "Artificial Neural Networks", etc.
- "Knowledge" is /implicit/ in the weights between nodes
- The weights are "trained" using a very large number of examples
- It is not possible to precisely predict the competence of such systems on novel input
      - Even when a human would find the input similar to the training data

*** Knowledge-Based Systems: the "Good Old-Fashioned AI"

In /Knowledge-Based Systems/ or KBS
- /Understanding/ of a domain consists of Knowledge
- /Knowledge/ is represented explicitly
      - often as rules of probabilitistic logic
      - along with explicit constraints
- The knowledge is often derived from that used by human experts
      - Hence the term "Expert Systems"
- The KBS interprets the knowledge to solve problems
      - This is called /Automated Reasoning/
      - All KBS behavior should be logical and explainable

*** Hybrid AI Systems

Hybrid AI Systems combine the strengths of ML and a KBS's AR
- Machine Learning is used for
      - Generation of Hypotheses and Plans
      - Efficient search of large domain spaces
- /Automated Reasoning/ is used for
      - Verification of hypotheses and plans
      - Organizing strategies for solving problems

A spectacular example of modern Hybrid AI was the [[https://en.wikipedia.org/wiki/IBM_Watson][IBM Watson]] Jeopardy
Contestant. Like many other AI systems, it demonstrated extraordinary expertise
within its specific domain. The techniques it employed can doubtless be applied
to solve many important problems - but only when applied by human experts who
have true understanding of both the techniques and the problem domains.

*AGI,* /Artificial General Intelligence/, is the goal of creating AI systems
which exhibit intelligence sufficient to rival human intelligence in all areas.
Currently AGI is limited by the lack of anything resembling the true
understanding possessed by human beings.

True understanding consists of flexible distinctions which allow intelligent
entities to understand
- What everything means (the problem of interpretation)
- What is important (values)
- The boundaries of a domain (fuzziness)
- How to transform data, information and knowledge when things change
- Etc.
So far true understanding seems to be
- a capacity which only human beings exhibit
- which we don't understand very well!

*** AI Winters

A number of powerful and successful Expert Systems were built back in the 1970s
to the 1980s.  Some of these systems exceeded human performance at
- Diagnosis and treatment recommendations for serious human diseases
- Chemical analysis
- Some very important areas of mathematics
- etc.

This led to a great deal of excitement which led to a number of people selling
systems which claimed to be Knowledge-Based Systems but which were not based on
reliable forms of Logic or Automated Reasoning.

Many people with no understanding of KBSs or AR attempted to build expert
systems and failed. This caused a collapse of confidence. For this and other
reasons funding for research and development of all expert systems and AI in
general was reduced and projects were canceled. AI was suddenly unfashionable.

In 2023 we are currently at a very high level of excitement about machine
learning, large language models and related technologies. Many people are
touting such technologies as perfect solutions to a broad range of challenging
problems. Understanding of KBSs, AR and Hybrid AI is becoming rare. We are in
danger of another AI Winter.

We can best prevent another AI Winter by spreading an understanding of the power
and limitations of these technologies and how they can be best used.

** Areas of Artificial Intelligence

Two of my favorite areas are
- [[https://en.wikipedia.org/wiki/Natural-language_understanding][Natural Language Understanding]]
- [[https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning][Knowledge Representation and Reasoning]]

Artificial Intelligence employs many powerful computing techniques. There has
been an historical pattern in AI where a particular technique has been seen as
the primary technology for AI, leading people to confuse that technique with the
whole field. 

Some AI techniques which have at times been confused with the field itself
- [[https://en.wikipedia.org/wiki/Symbolic_artificial_intelligence#Logic-based][Symbolic Logic]]
- [[https://en.wikipedia.org/wiki/Production_system_(computer_science)][Production Systems]]
- [[https://en.wikipedia.org/wiki/Expert_system][Expert Systems]]
- [[https://en.wikipedia.org/wiki/Machine_learning][Machine Learning]]

A system which combines multiple Artificial Intelligence technologies,
especially explicit domain knowledge representation along with machine-learning
techniques is referred to as a [[https://bdtechtalks.com/2020/03/04/gary-marcus-hybrid-ai/][Hybrid AI System]].

** Classic AI Paradigms

*** Generate and Test

- Use some heuristic mechanism, e.g. machine learning, to generate hypotheses
- Apply reasoning to judge the validity and/or value of the hypotheses

*** Representation and Search

(1) Design /data structures/ which efficiently represent
- the information available to solve the problem aka /the givens/
- an acceptable solution aka /a goal/
- any intermediate states along the way aka /problem states/
 
Examples
- Lists of roads in [[https://en.wikipedia.org/wiki/Journey_planner][Journey Planners]], e.g. /Google Maps/
- Pieces laid out on a /game board/, e.g. chess, go, etc.
- Fragments of [[https://en.wikipedia.org/wiki/Phrase_structure_rules][Phrase structure]] [[https://en.wikipedia.org/wiki/Tree_structure][trees]] in [[https://en.wikipedia.org/wiki/Natural-language_understanding][Natural Language Understanding]]

(2) Design a [[https://en.wikipedia.org/wiki/Search_algorithm][search strategy]] which can
- find an acceptable path
- from /the givens/
- to /a goal/

Examples
- [[https://en.wikipedia.org/wiki/A*_search_algorithm][A* Search]] for [[https://en.wikipedia.org/wiki/Journey_planner][Journey Planners]]
- [[https://en.wikipedia.org/wiki/Minimax][Minimax]] with [[https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning][Alpha-Beta Pruning]] in /board games/

The possible paths from /the givens/ to /a goal/ constitute /the search space/.
Problems with a small search space, such as /Tic Tac Toe/ (American) aka Naughts
& Crosses (British) do not require intelligence as an [[https://en.wikipedia.org/wiki/Algorithm][algorithm]] can simply
search all paths in the space and choose the best.

Intelligence can be seen as the ability to effectively navigate through search
spaces which are too large to search exhaustively, e.g. the search spaces of
/Chess/ or /Go/ or the possible meanings of a sentence. In such situations, we
use [[https://en.wikipedia.org/wiki/Heuristic][heuristics]] instead of [[https://en.wikipedia.org/wiki/Algorithm][algorithms]] to /prune the search space/.  /Machine
Learning is often a great heuristic!/

*** Combining Multiple Sources of Knowledge

Human intelligence is limited and often makes mistakes. A key strategy which
sophisticated humans use to reduce mistakes is to combine multiple intelligence
strategies, synthesizing multiple sources of knowledge, multiple viewpoints.

AI systems usually take a fairly narrow approach to parsing input and making
decisions. Combining multiple sources of knowledge, e.g. multiple kinds of
pattern matching, multiple representations, multiple reasoning strategies
requires the developers to work a lot harder. Much recent progress has occurred
by applying more brute force computational power to simpler strategies.
Eventually though, all simplistic strategies hit diminishing returns.

Combining multiple sources of knowledge is essential for generality, flexibility and
low error rates in intelligent systems.  While far from easy, this approach has
produced some of the most successful systems ever developed.  It is the future.

Examples
- [[https://en.wikipedia.org/wiki/Blackboard_(design_pattern)][Blackboard Architecture]] in [[https://en.wikipedia.org/wiki/Natural-language_understanding][Natural Language Understanding]]
- Hybrid AI in IBM /Watson/'s Jeopardy System
      - Rule-based AI plus Machine Learning

** AI Quotes

#+begin_quote
A computer system can be called Intelligent when it is able to competently
perform some task which we consider to require intelligence when a human being
performs that task.
#+end_quote

The Sherlock Holmes problem:
#+begin_quote
As soon as a computer system successfully accomplishes something which we've
previously thought required intelligence, we conclude that the task does not
require intelligence after all and that therefore the computer system is still
not intelligent.
#+end_quote

#+begin_quote
The question of whether a computer can think is no more interesting than the
question of whether a submarine can swim.
	― Edsger W. Dijkstra 
#+end_quote

** How can you master AI technology?

AI is a large field. It can't be learned all at once. Successfully creating AI
systems is never guaranteed, even experts often fail.

Learn incrementally, starting with
- Problems which interest you
- Techniques which appeal to you

AI is especially good at solving tasks, and parts of tasks, which human experts
find boring.
- Consider creating AI systems which assist human experts by handling the most
  routine and boring parts of their work.
- This will greatly increase the productivity and satisfaction of those human
  experts!
You can apply this strategy to programming (including AI development) itself.
- Automate away the boring parts of software development!

In this way, your path to mastery will be most enjoyable!

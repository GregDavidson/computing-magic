* Computing Magic Beta Module 7

/Reaching for Intelligence/

Based on a [[https://github.com/GregDavidson/computing-magic#readme][Computing Magic]] [[file:mars-beta-notes.org][Beta Course]] Meeting.

** What is Artificial Intelligence?

/Intelligence/ in computer systems is as diverse as intelligence is in human
beings. I recommend reading [[https://en.wikipedia.org/wiki/Artificial_intelligence][Wikipedia on Artificial Intelligence]] and exploring
some of the links there to get an overall map of the field.

Two of my favorite areas are
- [[https://en.wikipedia.org/wiki/Natural-language_understanding][Natural Language Understanding]]
- [[https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning][Knowledge Representation and Reasoning]]

Artificial Intelligence employs many powerful computing techniques. There has
been an historical pattern in AI where a particular technique has been seen as
the primary technology for AI, leading people to confuse that technique with the
whole field. 

Some AI techniques which have at times been confused with the field itself
- [[https://en.wikipedia.org/wiki/Symbolic_artificial_intelligence#Logic-based][Symbolic Logic]]
- [[https://en.wikipedia.org/wiki/Production_system_(computer_science)][Production Systems]]
- [[https://en.wikipedia.org/wiki/Expert_system][Expert Systems]]
- [[https://en.wikipedia.org/wiki/Machine_learning][Machine_learning]]

A system which combines multiple Artificial Intelligence technologies,
especially explicit domain knowledge representation along with machine-learning
techniques is referred to as a [[https://bdtechtalks.com/2020/03/04/gary-marcus-hybrid-ai/][Hybrid AI System]].

** Classic AI Paradigms

*** Generate and Test

- Use some heuristic mechanism, e.g. machine learning, to generate hypotheses
- Apply reasoning to judge the validity and/or value of the hypotheses

*** Representation and Search

(1) Design /data structures/ which efficiently represent
- the information available to solve the problem aka /the givens/
- an acceptable solution aka /a goal/
- any intermediate states along the way aka /problem states/
 
Examples
- Lists of roads in [[https://en.wikipedia.org/wiki/Journey_planner][Journey Planners]], e.g. /Google Maps/
- Pieces laid out on a /game board/, e.g. chess, go, etc.
- Fragments of [[https://en.wikipedia.org/wiki/Phrase_structure_rules][Phrase structure]] [[https://en.wikipedia.org/wiki/Tree_structure][trees]] in [[https://en.wikipedia.org/wiki/Natural-language_understanding][Natural Language Understanding]]

(2) Design a [[https://en.wikipedia.org/wiki/Search_algorithm][search strategy]] which can
- find an acceptable path
- from /the givens/
- to /a goal/

Examples
- [[https://en.wikipedia.org/wiki/A*_search_algorithm][A* Search]] for [[https://en.wikipedia.org/wiki/Journey_planner][Journey Planners]]
- [[https://en.wikipedia.org/wiki/Minimax][Minimax]] with [[https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning][Alpha-Beta Pruning]] in /board games/

The possible paths from /the givens/ to /a goal/ constitute /the search space/.
Problems with a small search space, such as /Tic Tac Toe/ (American) aka Naughts
& Crosses (British) do not require intelligence as an [[https://en.wikipedia.org/wiki/Algorithm][algorithm]] can simply
search all paths in the space and choose the best.

Intelligence can be seen as the ability to effectively navigate through search
spaces which are too large to search exhaustively, e.g. the search spaces of
/Chess/ or /Go/ or the possible meanings of a sentence. In such situations, we
use [[https://en.wikipedia.org/wiki/Heuristic][heuristics]] instead of [[https://en.wikipedia.org/wiki/Algorithm][algorithms]] to /prune the search space/.  /Machine
Learning is often a great heuristic!/

*** Combining Multiple Sources of Knowledge

Humans intelligence is limited and often makes mistakes.  A key strategy which sophisticated
humans use to reduce mistakes is to combine multiple intelligence strategies, synthesizing multiple
sources of knowledge, multiple viewpoints.

AI systems usually take a fairly narrow approach to parsing input and making
decisions. Combining multiple sources of knowledge, e.g. multiple kinds of
pattern matching, multiple representations, multiple reasoning strategies
requires the developers to work a lot harder. Much recent progress has occurred
by applying more brute force computational power to simpler strategies.
Eventually though, all simplistic strategies hit diminishing returns.

Combining multiple sources of knowledge is essential for generality, flexibility and
low error rates in intelligent systems.  While far from easy, this approach has
produced some of the most successful systems ever developed.  It is the future.

Examples
- [[https://en.wikipedia.org/wiki/Blackboard_(design_pattern)][Blackboard Architecture]] in [[https://en.wikipedia.org/wiki/Natural-language_understanding][Natural Language Understanding]]
- Hybrid AI in IBM /Watson/'s Jeopardy System
      - Rule-based AI plus Machine Learning

** AI Quotes

#+begin_quote
A computer system can be called Intelligent when it is able to competently
perform some task which we consider to require intelligence when a human being
performs that task.
#+end_quote

The Sherlock Holmes problem:
#+begin_quote
As soon as a computer system successfully accomplishes something which we've
previously thought required intelligence, we conclude that the task does not
require intelligence after all and that therefore the computer system is still
not intelligent.
#+end_quote

#+begin_quote
The question of whether a computer can think is no more interesting than the
question of whether a submarine can swim.
	â€• Edsger W. Dijkstra 
#+end_quote

** What else might you do?

This course is self-paced, so feel free to continue on to [[file:../README.org][other modules]]!

[[file:../../Prolog/README.org][Prolog]] will make it easier to create the Knowledge-Based parts of your system -
and it's an easy and fun language to learn!  Prolog is especially strong for
- Knowledge Representation
- Logic-based Reasoning with uncertainty
- Constraint-based Reasoning

Some resources for building Knowledge-Based Systems
- /PROLOG: a language for implementing expert systems/ by K.L. Clark and F.G. McCabe
      - short (21 pages) but with step-by-step working code
- /Building Expert Systems in Prolog/ by Dennis Merritt
      - comprehensive

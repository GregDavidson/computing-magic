* Overview of Artificial Intelligence

Part of [[https://github.com/GregDavidson/computing-magic#readme][Computing Magic]] [[file:module-7.org][Module 7]].

** What is Artificial Intelligence?

/Artificial Intelligence/ is any computing technology which exhibits skills
which, were they to be employed by a Human Being, we would consider a sign of
Intelligence. We do not count any behavior which is programmed in detail in
advance. The behavior should emerge from any program in a flexible and
appropriate manner similar to the emergence of intelligent behavior in a human
being.

/Intelligence/ in computer systems is as diverse as intelligence is in human
beings. I recommend reading [[https://en.wikipedia.org/wiki/Artificial_intelligence][Wikipedia on Artificial Intelligence]] and exploring
some of the links there to get an overall map of the field.

** Computing and Artificial Intelligence

Review [[https://github.com/GregDavidson/on-computing/tree/main#readme][On Computing]]
- especially [[https://github.com/GregDavidson/on-computing/blob/main/what-is-computing.org][What Is Computing?]]
      - especially the last section explaining
            - *Why AI Programming produces the Worst Solutions*

*** Data vs. Meaningful Information

To a binary computer, everything is just /data/, i.e. sequences of 0's and 1's
grouped into various chunks for processing by various hardware mechanisms.
Make sure you've read [[https://gregdavidson.github.io/on-computing/what-computers-are][What Computers Are]]!

In contrast, humans see /Information/ which has /Meaning/ within a /Context/
called a /Domain/ Examples of Domains include
- Financial Accounting
- Playing Chess
- Rendering 3D Virtual Worlds
- Understanding Human Language
- and so on, ad infinitum

Domains have no objective existence, they exist only as an interpretation which
human beings create according to their needs and interests.

*** Representation and Processing

Computing has two fundamental aspects:
- Representation :: how to effectively and efficiently express domain
  information as data
- Processing :: how to process that data effectively and efficiently using
  sequences of machine instructions.

Notice the use of the words /effectively/ and /efficiently/ in both parts
- Representation and Processing are intertwined
- Effectiveness is about correctness
      - Do we get correct answers and behavior?
- Efficiency is necessary in practice
      - Many known effective procedures require excessive resources
            - More memory than is available or affordable
            - More processing time than is available or useful
            - What use to predict tomorrow's weather by next year?
- A good representation aids efficiency
      - E.g. a chess board could be represented as
            - An image from a camera
            - An 8x8 matrix of the locations of the chess pieces
            - A list of openings and threats for each piece
            - Etc.
            - Which of these would be help in playing a good game?
            - How could these representations be achieved?
            - What other representations might be helpful?

/Information/ is /Data/ which has /Meaning/ in a /Domain/
- A picture of a chessboard is just meaningless bits to a computer
- In the domain of chess, it represents an arrangement of chess pieces

Meaning only exists for human beings. It's what allows us to understand things.
Computers systems can be designed to act /as if/ they understand things in /very
limited contexts/, but they don't actually understand anything!

In conventional computer programming, the knowledge and understanding which the
programmer used to design the computer system is /implicit/ in the program. The
computer mindlessly executes the program and if it doesn't do what the
programmer intended, we say "it has a bug" and an expert human programmer has to
analyze the program and "fix the bug". The gap between human understanding and
the structure of code is often so large that it's easier to just delete buggy
code and design new code from scratch.

In AI terminology, /Knowledge/ is /understanding/ which can be captured in data
structures and flexibly applied within a domain.
- Human experts generally have lot of knowledge about their domain of expertise.
- AI Knowledge-Based "Expert" Systems can represent and apply /explicit knowledge/.
      - The knowledge is in the form of rules and procedures.
      - The rules and procedures were mostly created by human experts.
      - But they can be flexibly applied using automated reasoning.
- Machine Learning Systems can capture and apply large amounts of /implicit knowledge/.
      - The knowledge is implicit in generalized pattern structures.
      - The pattern structures were "trained" using a very large number of examples.
      - They will tend to match anything similar to the training data.

Explicit Knowledge-Based Systems and Machine Learning Systems
- Act like experts when they're working well.
      - Giving an appearance of understanding
      - Performing valuable work
- Act like bizarre and insane people when they fail
      - Revealing their actual lack of understanding

Hybrid AI Systems combine the strengths of the two approaches
- Machine Learning is used for
      - Generation of Hypotheses and Plans
      - Efficient search of large domain spaces
- Logical processing of explicit knowledge is used for
      - Verification of hypotheses and plans
      - Organizing strategies for solving problems

A spectacular example of modern Hybrid AI was the [[https://en.wikipedia.org/wiki/IBM_Watson][IBM Watson]] Jeopardy
Contestant. Like many other AI systems, it demonstrated extraordinary expertise
within its specific domain. The techniques it employed can doubtless be applied
to solve many important problems - but only when applied by human experts who
have true understanding of both the techniques and the problem domains.

*AGI,* /Artificial General Intelligence/, is the goal of creating AI systems
which exhibit intelligence sufficient to rival human intelligence in all areas.
Currently AGI is limited by the lack of anything resembling the true
understanding possessed by human beings.

True understanding consists of flexible distinctions which allow intelligent
entities to understand
- What everything means (the problem of interpretation)
- What is important (values)
- The boundaries of a domain (fuzziness)
- How to transform data, information and knowledge when things change
- Etc.
So far true understanding seems to be
- a capacity which only human beings exhibit
- which we don't understand very well!

** Areas of Artificial Intelligence

Two of my favorite areas are
- [[https://en.wikipedia.org/wiki/Natural-language_understanding][Natural Language Understanding]]
- [[https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning][Knowledge Representation and Reasoning]]

Artificial Intelligence employs many powerful computing techniques. There has
been an historical pattern in AI where a particular technique has been seen as
the primary technology for AI, leading people to confuse that technique with the
whole field. 

Some AI techniques which have at times been confused with the field itself
- [[https://en.wikipedia.org/wiki/Symbolic_artificial_intelligence#Logic-based][Symbolic Logic]]
- [[https://en.wikipedia.org/wiki/Production_system_(computer_science)][Production Systems]]
- [[https://en.wikipedia.org/wiki/Expert_system][Expert Systems]]
- [[https://en.wikipedia.org/wiki/Machine_learning][Machine_learning]]

A system which combines multiple Artificial Intelligence technologies,
especially explicit domain knowledge representation along with machine-learning
techniques is referred to as a [[https://bdtechtalks.com/2020/03/04/gary-marcus-hybrid-ai/][Hybrid AI System]].

** Classic AI Paradigms

*** Generate and Test

- Use some heuristic mechanism, e.g. machine learning, to generate hypotheses
- Apply reasoning to judge the validity and/or value of the hypotheses

*** Representation and Search

(1) Design /data structures/ which efficiently represent
- the information available to solve the problem aka /the givens/
- an acceptable solution aka /a goal/
- any intermediate states along the way aka /problem states/
 
Examples
- Lists of roads in [[https://en.wikipedia.org/wiki/Journey_planner][Journey Planners]], e.g. /Google Maps/
- Pieces laid out on a /game board/, e.g. chess, go, etc.
- Fragments of [[https://en.wikipedia.org/wiki/Phrase_structure_rules][Phrase structure]] [[https://en.wikipedia.org/wiki/Tree_structure][trees]] in [[https://en.wikipedia.org/wiki/Natural-language_understanding][Natural Language Understanding]]

(2) Design a [[https://en.wikipedia.org/wiki/Search_algorithm][search strategy]] which can
- find an acceptable path
- from /the givens/
- to /a goal/

Examples
- [[https://en.wikipedia.org/wiki/A*_search_algorithm][A* Search]] for [[https://en.wikipedia.org/wiki/Journey_planner][Journey Planners]]
- [[https://en.wikipedia.org/wiki/Minimax][Minimax]] with [[https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning][Alpha-Beta Pruning]] in /board games/

The possible paths from /the givens/ to /a goal/ constitute /the search space/.
Problems with a small search space, such as /Tic Tac Toe/ (American) aka Naughts
& Crosses (British) do not require intelligence as an [[https://en.wikipedia.org/wiki/Algorithm][algorithm]] can simply
search all paths in the space and choose the best.

Intelligence can be seen as the ability to effectively navigate through search
spaces which are too large to search exhaustively, e.g. the search spaces of
/Chess/ or /Go/ or the possible meanings of a sentence. In such situations, we
use [[https://en.wikipedia.org/wiki/Heuristic][heuristics]] instead of [[https://en.wikipedia.org/wiki/Algorithm][algorithms]] to /prune the search space/.  /Machine
Learning is often a great heuristic!/

*** Combining Multiple Sources of Knowledge

Human intelligence is limited and often makes mistakes. A key strategy which
sophisticated humans use to reduce mistakes is to combine multiple intelligence
strategies, synthesizing multiple sources of knowledge, multiple viewpoints.

AI systems usually take a fairly narrow approach to parsing input and making
decisions. Combining multiple sources of knowledge, e.g. multiple kinds of
pattern matching, multiple representations, multiple reasoning strategies
requires the developers to work a lot harder. Much recent progress has occurred
by applying more brute force computational power to simpler strategies.
Eventually though, all simplistic strategies hit diminishing returns.

Combining multiple sources of knowledge is essential for generality, flexibility and
low error rates in intelligent systems.  While far from easy, this approach has
produced some of the most successful systems ever developed.  It is the future.

Examples
- [[https://en.wikipedia.org/wiki/Blackboard_(design_pattern)][Blackboard Architecture]] in [[https://en.wikipedia.org/wiki/Natural-language_understanding][Natural Language Understanding]]
- Hybrid AI in IBM /Watson/'s Jeopardy System
      - Rule-based AI plus Machine Learning

** AI Quotes

#+begin_quote
A computer system can be called Intelligent when it is able to competently
perform some task which we consider to require intelligence when a human being
performs that task.
#+end_quote

The Sherlock Holmes problem:
#+begin_quote
As soon as a computer system successfully accomplishes something which we've
previously thought required intelligence, we conclude that the task does not
require intelligence after all and that therefore the computer system is still
not intelligent.
#+end_quote

#+begin_quote
The question of whether a computer can think is no more interesting than the
question of whether a submarine can swim.
	― Edsger W. Dijkstra 
#+end_quote

** How can you master AI technology?

AI is a large field. It can't be learned all at once. Successfully creating AI
systems is never guaranteed, even experts often fail.

Learn incrementally, starting with
- Problems which interest you
- Techniques which appeal to you

AI is especially good at solving tasks, and parts of tasks, which human experts
find boring.
- Consider creating AI systems which assist human experts by handling the most
  routine and boring parts of their work.
- This will greatly increase the productivity and satisfaction of those human
  experts!
You can apply this strategy to programming (including AI development) itself.
- Automate away the boring parts of software development!

In this way, your path to mastery will be most enjoyable!

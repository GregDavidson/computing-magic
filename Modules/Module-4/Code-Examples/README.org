* Racket HTTP Server Exercises

** What's This?

This directory contains Racket HTTP Servers
- example solutions
- constructive criticism
- alternative solutions
inspired by the /Excellent Tutorial/
- [[https://docs.racket-lang.org/more][More: Systems Programming with Racket]]
Along with a simple example
- Non-Web Client/Server Domain-Specific Protocol
- applied to a very simple game domain

The /More/ Tutorial is teaching and demonstrating
- general systems and application programming techniques
- including how to create a framework

If you're specifically interested in creating web servers
- See this tutorial: [[https://docs.racket-lang.org/continue/index.html][Continue: Web Applications in Racket]]
- which uses the excellent [[https://docs.racket-lang.org/web-server][Racket Web Framework]]

** What's Here?

The example solutions from the tutorial are here
#+begin_src sh
  ls http-serve-*.rkt | sort | sed 's/\(.*\)/[[file:\1][\1]]/'
#+end_src

#+RESULTS:
| [[file:http-serve-1.rkt][http-serve-1.rkt]] |
| [[file:http-serve-2.rkt][http-serve-2.rkt]] |
| [[file:http-serve-3.rkt][http-serve-3.rkt]] |
| [[file:http-serve-4.rkt][http-serve-4.rkt]] |
| [[file:http-serve-5.rkt][http-serve-5.rkt]] |
| [[file:http-serve-6.rkt][http-serve-6.rkt]] |
| [[file:http-serve-7.rkt][http-serve-7.rkt]] |
| [[file:http-serve-8.rkt][http-serve-8.rkt]] |
| [[file:http-serve-9.rkt][http-serve-9.rkt]] |

/Alternative Example Solutions/ inspired by the tutorial
#+begin_src sh
  ls http-server-*.rkt | sort | sed 's/\(.*\)/[[file:\1][\1]]/'
#+end_src

#+RESULTS:
| [[file:http-server-1.rkt][http-server-1.rkt]] |
| [[file:http-server-2.rkt][http-server-2.rkt]] |

** Constructive Criticism

The Tutorial Servers can be improved in many ways
- This is true for all interesting software systems!

Code is missing for
- Sanitizing and normalizing input
- Throwing errors on invalid input
- Handling exceptions

Coding Improvements
- Use of appropriate =let= forms instead of internal defines
- One or more macros to reduce boilerplate and ease refactoring
      - Especially for defining handlers

The scope of this ad hoc framework is unnecessarily limited

We'd like handlers to be able to
- examine input headers
- generate output headers
- generate non 200 responses
- generate output with or without xhtml
without complicating the most common cases!

The coding issues are addressed by the
- [[file:http-server-1.rkt][http-server-1.rkt]] :: first alternative example
The scope and design issues by the
- [[file:http-server-2.rkt][http-server-2.rkt]] :: second alternative example

** Design Considerations for Second Alternative Example

Can we generalize the interface to our handler functions?
- Their parameter signatures
      - each either positional or named, required or optional
      - required/optional and position vs. named/positional
- Their return arities
      - ideally returning only 1 value

We can either
- Give all Handler Functions the same interface
- Group or Tag the Handler Functions by their interface

Generalizing the Handler Function Parameters
- Required Parameters: path
- Optional Parameters: query-string/form-data, headers
      - We can use the same data structure for
            - Query Strings from GET ?var=val settings
            - Form Data from GET form fields
- Any miscellaneous data can be passed as a pseudo-header
      - PUT vs. GET, HTTP Version, etc.

We could allow Handler Functions to return any of
1. a simple string
       - send it with default headers
2. an XHTML S-Expression
3. Output Headers
       - Including pseudo-headers specifying
             - status-code, status-string
             - content as either strings or xhtml

Output Pseudo-Headers would be ignored by write-header.
- Type or Spelling convention of their header-keys.

This design is very Lispy, i.e.
- it uses easy runtime detection of intent
- rather than using more formal static datatypes

An especially lispy technique is to define the Handler Functions
with a macro so that
- they're especially easy to read and write
- the interface is easy to centrally change
      - e.g. an optional named parameter could be added in the macro
            - new handler functions could use it
            - old handler functions are free to ignore it

** A Non-HTTP Client/Server Network Protocol

There are many ways to enable Clients and Servers to /Connect and Coordinate/ over a network.

General-Purpose Protocols include
- [[https://en.wikipedia.org/wiki/HTTP][HTTP]] without or without elements of [[https://www.w3.org/][Web Standards]] such as [[https://en.wikipedia.org/wiki/XHTML][XHTML]]
- [[https://en.wikipedia.org/wiki/Remote_procedure_call][Remote Procedure Call]] libraries and frameworks
- etc.

It's also possible and sometimes valuable to
- [[file:client-server-protocol-design.org][Design a Custom Client/Server Protocol]]!

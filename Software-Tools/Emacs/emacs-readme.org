* Becoming An Emacs Wizard for Computing Magic!

** TL;DR Just get me started!

1. Install [[https://www.gnu.org/software/emacs][Gnu Emacs]] in a manner suitable for your Platform.

2. Start the application.

3. Start the built-in tutorial by typing
- Control-h t
      - hold down the =Control Key= while typing the letter =h=
      - release the =Control Key=
      - type the letter =t=
- on Macintoshes =Control Key= might be =Command Key=

- Important :: Work through the Tutorial until your fingers know these basics.
  Start using Emacs for something that matters to you. /There's a suggestion
  below involving OrgMode./

Emacs is well worth your effort to learn to use well. I recommend reading the
rest of this document as soon as possible!

** Add An Emacs Starter Kit!

You don't have to build a nice Emacs environment from scratch!

There are many [[https://www.emacswiki.org/emacs/StarterKits][Emacs Starter Kits]]!
- Which one is best for you?

*Are you inclined towards Evil?*
- I.e. Do you know and love the command set of the =vi= editor family?
- This includes any of =vi=, =vim=, =elvis= or =nvim=.

Two excellent starter kits which add =vi= compatible commands to =emacs=
- [[https://github.com/hlissner/doom-emacs][Doom: modest yet Evil]]
- [[https://www.spacemacs.org][Spacemacs: Ambitious and Evil]]

*Or Non-Evil*

An excellent Non-Evil Starter Kit
- [[https://github.com/bbatsov/prelude][Prelude: Powerful yet compatible with default emacs]]

** Best Emacs Feature: OrgMode

/OrgMode/ is unbelievably awesome.
- Really, you won't believe it,
- until you've discovered it for yourself!

There are /lots/ of good tutorials for the many, many things you can do with
OrgMode.
- [[https://orgmode.org/worg/org-tutorials/index.html][Org-Mode Tutorials]]

A good place to start:
-[[https://orgmode.org/][ Org Mode: Your life in plain text]]

Some select Video Tutorials:
- [[https://youtu.be/0-brF21ShRk][Learn Org Mode - It's Easy!]]
- [[https://youtu.be/oJTwQvgfgMM][Org-Mode for note-taking and project planning]]
- [[https://youtu.be/Bpmkeh4D98s][Building a Second Brain in Org Mode]]

Suggestion: *Start keeping your notes and resources using Emacs Orgmode.*
- Start as soon as you've learned the most basic Emacs and Org-Mode features
- /Keep learning and exploiting more Emacs and Org-Mode features/

*** OrgMode Sub-Topics

OrgMode is so much more than just a great way of organizing information!

[[https://orgmode.org/worg/][Browse the Worg Community Resources]]

**** Org-Babel Notebooks

If you use software tools in your work or play
- Statistical Analysis Programs
- Graphing and Diagramming Programs
- Programming Languages
- etc.
Org-Babel can greatly assist you!

You might have used
- [[https://docs.jupyter.org/en/latest][Project Jupyter Notebooks]]
- or similar
[[file:emacs-org-babel.org][Org-Babel Notebooks]] are better!
- One Org-Babel notebook can use multiple languages and tools
- Org-Babel integrates with the rest of the Emacs Ecosystem

** Mastering Emacs

Learn Emacs and its subsystems (OrgMode, Magit, etc.) gradually
- Start with the parts you see immediate value in
- Gradually extend your knowledge

Read some of the free materials at [[https://www.masteringemacs.org][Mastering Emacs]]
- starting with [[https://www.masteringemacs.org/reading-guide][the Guide]]
- and continuing with [[https://www.masteringemacs.org/all-articles][Tips, Tutorials and Articles]]

Browse [[https://sachachua.com/blog/category/emacs][Emacs Weekly News]] from time to time - maybe quarterly?

** Understanding Emacs For The Win!

As you gradually acquire Emacs Foo, it will help to understand the Architecture of Emacs
and a bit of /Why/ Emacs is that way.

*** Keyboards and Modifier Keys

Emacs was invented to be the Editor for [[https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory#Project_MAC][Project MAC]] (Machine Aided Cognition) at
the [[https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory][MIT Artificial Intelligence Lab]]. They were /all about/ Computing Magic, i.e.
smart machines running on (for the time) advanced computers assisting humans
with demanding cognitive tasks (such as programming) by automating the boring
parts. Their computers and workstations were really cool, including their
keyboards.

Check out [[https://en.wikipedia.org/wiki/Space-cadet_keyboard][The Space-Cadet Keyboard]]: bring up the full-sized picture and look at
the modifier keys at the bottom. The Space-Cadet Keyboard has 5 modifier keys:
Shift, Control, Meta, Super, Hyper.

The idea of modifier keys is that you can use them in conjuction with a mnemonic
letter key to carry out operations, e.g. *Meta-F* for =forward-word=.

Modern keyboards have *Shift* and *Control* but don't have *Meta*, *Super* or
*Hyper*. How can we adapt Emacs to modern keyboards?

1. We can map *Meta* to *Alt*.
2. We can use /prefix keys/ to compensate for missing dedicated modifier keys

Here are the conventions for Gnu Emacs on a typical PC Keyboard:

    - Control :: for character-level operations
          - Often /Command/ on Macintoshes
    - Meta ::  (usually Alt) for operations on larger syntactic units
    - Control-X Prefix :: for system operations, e.g. files
    - Control-C Prefix :: for local mode operations
    - Control-H Prefix :: for Help functions

With some cleverness you can extend your keyboard's modifier keys
- [[https://irreal.org/blog/?p=6645][Adding Hyper and Super Keys for Emacs]]
- Especially useful on a Mac or if you have typing issues

You can use multiple modifier keys together
- you could use, e.g. =C-M-S-k= (Control + Meta + Super + k)
- to invoke function =kill-with-nuclear-missile=
- with one quick compound operation!

**** Gestures call Lisp Functions

Emacs is a big bag of Lisp Functions.
- Meta-x :: Call a Lisp Function by name (with completion)

Keymaps bind shortcuts to functions
- Control-F :: =forward-char= move /point/ forward by =n= characters
- Meta-F :: =forward-word= move /point/ forward by =n= words
- Control-Meta-F :: =forward-sexp= move /point/ forward by =n= symbolic expressions

You can add your own /lisp functions/, /keymaps/ and /shortcuts/!

**** Emacs terminology is Archaic but Precise

- Buffers :: Hold your Bytes - /usually/ Text
    - /Buffers/ can be associated with /Files/ or /Processes/
    - Files and Processes can be /local/ or /remote/!
- Windows :: Display buffer contents for users
- Frames :: Hold /Windows/ on /Window Systems/
    -  /Frames/ are what most people would now call /Windows/
    -  /Windows/ are what some people would now call /Window Panes/

Part of why we don't just use the "modern" terms is because Emacs is perfectly
happy to run without a graphics display, yet it will still provide us with
windows!

** Why Emacs Matters

Emacs is much more than just a /Text Editor/. Emacs is a platform for doing
creative work as long as the work-flow is based on sort of text or can be
converted to or from a text format.

Text formats include
- Code of nearly every programming language
- Scripts for command tools
- Notations for generating visual art
- Notations for generating music
- HTML, CSS, Javascript
- EMail formats
- Document Markup Languages
- and /much more!/

All of these things can be intelligently managed by Emacs under the control of
collections of Lisp functions. Vast amounts of such collections, called
/packages/ have been written by others and are freely available. You can augment
and/or replace any of those functions to customize Emacs to your will. Emacs is
a platform which can be infinitely customized and extended.

While some other tools and platforms have some of these characteristics, Emacs
is more complete and flexible than any other currently available system. Emacs
can work with more Languages and practices than any other editor or development
platform.

** Emacs Criticism

Emacs has an old-fashioned design and is based on an old-fashioned dialect of
Lisp. It would be nice to bring these things up to date, but because of the vast
amount of work which has gone into creating smart Emacs packages, Emacs resists
radical change. Instead, its design slowly evolves over time, accommodating new
capabilities while maintaining compatibility with the past.

Learning Emacs takes awhile as you gradually learn how Emacs works and how to
exploit its power.

It would be nice if there were anything comparable!

* Git Notes for Computing Magic

While /software is eating the world/, =git= is rapidly taking charge of
organizing most software development projects. But =git= can be used for much
more than software development, although it's full capabilities only apply to
information stored in files using text formats.

Because Text formats include
- Code of nearly every programming language
- Scripts for command tools
- Notations for generating visual art
- Notations for generating music
- HTML, CSS, Javascript
- EMail formats
- Document Markup Languages
- and /much more!/
=git= can be used for most creative projects.
It sometimes seems that everyone is using Git!

You can install git from [[https://git-scm.com/download][git-scm]].

Suggestion: Study one of the following tutorials and then use =git= for awhile.
Then study another tutorial. Eventually you will want to read the /Git Book/ to
understand =git= thoroughly!

- [[https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/][Learn the Basics of Git in under 10 Minutes]]
- [[https://juristr.com/blog/2013/04/git-explained/][Git Explained: For Beginners]]
- [[https://nfarina.com/post/9868516270/git-is-simpler][Git Is Simpler Than You Think]]
- [[https://xosh.org/explain-git-in-simple-words/][How to explain git in simple words?]]
- [[https://marklodato.github.io/visual-git-guide/index-en.html][A Visual Git Reference]]
- [[https://www.youtube.com/playlist?list=PLgyU3jNA6VjSUZPhZ7WtoBUnxzChBwKuw][Git - YouTube Series]]
- [[https://git-scm.com/book/en/v2][The Git Book]]

** GitHub and such

You can use =git= to manage information which only resides on your private
machines and you're the only developer. When you want to work with your projects
using multiple devices and/or with collaborators, it is more convenient to put
your =git= /repositories/ (collections of files in a working directory) on
servers which are accessible (with appropriate security credentials) over the
Internet. =git= has powerful features to assist with these kinds of distributed
and collaborative modes of development.

Several organizations offer basic free and enhanced low-cost Internet storage of
=git= repositories, including
- [[https:github.com][GitHub]] - most popular, now owned by Microsoft
- [[https:gitlab.com][GitLab]] - entirely based on Free/Libre Open-Source Software

Because it's trivial to move a repository from any of these services to any
other ones and to and from your devices, you don't need to worry about your
repositories being trapped by any of these services.

I recommend that you have a GitHub account and create a private repository named
*Notes* which you clone on all of your devices.

For a new repository, it's easiest to create it as an empty repository on
/GitHub/, copy its /url/ from the /code/ pulldown and then use =git clone
that-url= from a command shell on your computer. Once you've done that, you can
sync anything you've committed in your local repository with the /GitHub/ clone
using the command
- =git push origin master=
- Note :: some git systems use the branch name =main= instead of =master=
  - =git status= will tell you your branch name, and much more!
 
If you do any work on /GitHub/ directly, or there's work there pushed from other
devices, you can pull that work into your current local repository with the
command
- =git pull origin master=
Note: You can only pull or push when all of your work has been /committed/ with
- =git commit=.

As soon as you have a /Notes/ repository, start taking notes on the languages,
tools and other things you're learning. If you're using /Emacs/, use /OrgMode/
files, e.g.
- =git-notes.org= /notes on Git, GitHub, etc./
- =emacs-notes.org= /notes on Emacs, OrgMode, etc./
- =racket-notes.org= /notes on Racket and maybe Scheme too/
- etc.

After any change in any of these files you can do
- =git add .= to stage all changed files
      - or =git add specific-file...=
- =git commit= /pops up an editor to capture your 1-line comment/
      - git commit -m 'your commit comment' /comment is given in command/
- =git push origin master=

Once you learn =magit= this workflow will become much faster - see next section!

Maintaining your notes in this manner will be a valuable mnemonic and will also
give you great practice with =git=, =emacs= and /OrgMode/!

** Magit makes magic with Git within Emacs

While the full power of =git= is only available from a /Command Shell/, most of
the regular =git= workflow can be controlled with great ease using the /Emacs/
=magit= function, part of the =magit= package.
 
- [[https://magit.vc/][It's Magit!]]
- [[http://ergoemacs.org/emacs/emacs_magit-mode_tutorial.html][Xah Magit Tutorial]]

#+TITLE: Posix Shell Essentials
#+SUBTITLE: Overview of Writing Posix Shell Scripts
#+AUTHOR: J. Greg Davidson
#+DATE: 18 October 2022
#+OPTIONS: toc:nil
#+OPTIONS: num:nil

* Overview of Writing Posix Shell Scripts

** Notes to the Reader

This is an [[https://orgmode.org][OrgMode]] Document. If you are reading it with Emacs you can follow
internal links, fold and unfold content and much more! Using =GitHub= or other
emulations will only provide a small subset of OrgMode capabilities.

Note: Many of the /Italicized/ or =verbatim= terms have a short explanation in
our [[file:../../computing-glossary.org][Computing Glossary]].

This document is specifically about /Shell Scripting/. For more general
scripting, please see [[../README.org][Scripting README]].

This document is /didactic/. It's intended to complement the deeper
understanding you'll get from
- reading examples
- trying out variations
- writing your own scripts
We recommend you read this document along with
- the more /example-driven/ [[file:shell-script-resilience.org][Shell Script Resilience]]

This document also introduces you to the essential online reference materials.

** A Human-Oriented, Casual, Interactive /Command Interpreter/

The /Posix Shell/ derives from the era where the primary human computer
interface was a /Terminal/ consisting of a /Text-Oriented Display/ and a
/Keyboard/. A /User/ would enter commands at the /Terminal/ which would be
/Interpreted/ by the /Shell/ to (hopefully) perform the User's wishes.

Key functions of a Shell:
- Execute Programs
- Manage Input and Output
- Manage Errors
- Make everything easier!

*** An Interactive Shell takes input from a Terminal

You can issue commands to a shell /interactively/ at the (P)REPL:
- Prompt :: The Shell writes a prompt (default is "$ " in ~sh~ and ~bash~)
- Read :: The shell reads a command from your terminal (typically your keyboard)
       - A command can be one or more lines long.
       - The shell keeps reading lines until the command is syntactically complete.
- Evaluate :: The shell evaluates your command
       - Interpreting any commands built-in to the shell
       - Executing any external programs in new processes
- Print :: Any output not redirected elsewhere is printed to your terminal.
- Loop :: The shell loops back to *Prompt*.

*** A Non-Interactive Shell takes input from a Script

A /Script/ consists of the same commands you can issue interactively
- typically stored in a /textfile/
- alternatively supplied by an /Input Stream/, e.g. a [[https://en.wikipedia.org/wiki/Pipeline_(Unix)][Pipe]]

If you know how to issue commands to a shell manually, then you can trivially
create a naive shell script:
- Create a new text file using your favorite editor
- The first line starts with #! aka the [[https://en.wikipedia.org/wiki/Shebang_(Unix)][Shebang]]
      - Shebang :: #!PATH-TO-SHELL
      - specifies the program to run to interpret your file
      - You need a full path - make sure it's correct!
            - to check, run ~type SHELL-NAME~ or ~type -P SHELL-NAME~
            - e.g. ~type bash~ or ~type -P bash~
- Enter your desired commands into it
- Make the script executable
      - ~chmod +x FILE-NAME~
- To run it, either
      - specify a path to it when you run it
            - e.g. ~./FILE-NAME~ if it's in your current directory
      - just use its name if it's in a directory on your ~$PATH~
            - e.g. ~mv FILE-NAME ~/bin~
                  - =~/bin= is typically on your =$PATH=
                  - to check, run ~echo $PATH~ or
#+begin_src sh
  echo $PATH | tr : '\n'
#+end_src
            - Watch out for name clashes among programs on your =$PATH=!

** Finding Documentation

*** Most of the /Shell Commands/ are /Independent Programs!/

Because most shell commands are /independent programs/, you need handy
information on /all possible programs/ on your system!

The core of Posix documentation is /man pages/
- man :: the quick-reference manual pages, like a set of cheat sheets
      - run ~man man~ to learn how to use it!
      - run ~man apropos~ to learn how to search the man pages
      - run ~man whatis~ to learn how to access 1-line descriptions
      - run ~whatis intro~ to see the sections
            - if unsorted, try ~whatis intro | sort~
      - run ~man date~ to lookup the =date= program
      - run ~man bash~ to lookup the =bash= shell
      - run ~man zsh~ to lookup the =zsh= shell

Documentation for GNU programs might be in three places
- man pages -- basic reference, like a /cheat sheet/
- info pages -- complete reference and tutorial in one document
      - run ~info~ and then the ~h~ command to learn how to use it!
      - of if you're inside of /emacs/
            - ~Control-h i~ or ~Alt-x info~
      - If you don't feel like learning this charmingly antiquated system
            - You can find it all online, e.g
            - [[https://www.gnu.org/software/bash/manual/bash.html][Bash Info Online]]
            - [[https://www.gnu.org/software][Official GNU Software]]
            - Or just do a web search for tutorials and reference manuals
- brief program help and options
      - Run the program with the option =--help=
            - that's two dashes =--= and the word =help=
      - Try ~cat --help~ and ~bash --help~

If you don't have the /man pages/ or /info pages/ installed on your system
- You can access the same information via the Web
- And it's nicer to have them installed on your local computer!

*** A few /Shell Commands/ are /Built-Ins/

If you're running =bash= you can lookup builtin commands with the =help= command
- ~help~ -- with no arguments, lists all builtins
- ~help COMMAND~ -- prints a quick reference for COMMAND
      - Try: ~help help~ and ~help type~
      - Try: ~help true~ and ~help false~
      - Try: ~help if~ and ~help exit~
      - Some builtin commands have a /lot/ of options!

If you're running ~zsh~ try ~man zshbuiltins~

** Documenting Your Script

You should document anything non-obvious
- The shell ignores anything after an unquoted # character
- If a short comment will do, give it
- Otherwise link to a more complete explanation elsewhere

Even better is to make things obvious:
- You could say
      - ~cd /usr/local/src # go to the destination directory~
- or you could say
      - ~dest_dir=/usr/local/src~
      - ~cd "$dest_dir"~
- especially if your script references it multiple times

A comment should assist a /Power User/ in reading and understanding the script's
code rather than be a substitute for understanding it. After all, a comment can
easily be wrong!

** Exit Codes and Program Logic

In the Posix model, when a program terminates, it returns an /Exit
Code/ to its parent process, e.g. to the shell.  Exit codes are 1-byte
integers in the range 0..255

- Exit codes :: one-byte non-negative integers
| code(s) | meaning                                               |
|---------+-------------------------------------------------------|
|   0-255 | available codes                                       |
|       0 | "success" code, treated as "true" in scripts          |
|   1-255 | treated as "false" in scripts                         |
|       1 | non-specific "failure" code                           |
|   3-125 | available "failure" codes for any application purpose |
| 126-255 | codes with pre-existing meanings, can be repurposed   |

When you run a command interactively its /Exit Code/ is available after termination in the /Special Parameter/ =$?=
- /Run some command/
- ~echo $?~

After the ~echo $?~, the ~$?~ will become the /Exit Code/ of the =echo= command,
so if you want to use the code more than once, be sure to save it:
- /Run some command/
- ~my_command_status=$?~
- ~echo "$my_command_status"

A script can use any of the 256 /Exit Codes/ to mean anything it likes, but
most commands follow the convention
- Exit Code 0 :: to mean /True/ or the command /Succeeded/ in its purpose
- any non-zero Exit Code :: to mean /False/ or the command /Failed/ or somehow
  deviated from expectations
When you follow this convention you can combine commands using Boolean Logic:
- the =if= and =while= builtin commands
- the Boolean operators =!= (not), =&&= (and then), =||= (or else)
      - See bash-metas in [[file:../Reference-Sheets/README.org][handy reference sheets]]

Again, you don't have to use Exit Codes

** The Bottom Line

If you know how to use a Shell (or any other Scriptable Application)
/Interactively/ from a /Terminal/, then writing a /Na√Øve Script/ is easy:
- Just stuff the commands you would use interactively in a file with an
  appropriate /Shebang/ and make it executable.
- But the next time those commands are executed they may no longer be
  appropriate!

A good Script is /resilient/ to changes in the situation. As a start, we
recommend that you
- carefully study [[file:shell-script-resilience.org][Shell Script Resilience]]
- bring your creative critical intelligence to the /Art Of Scripting/!

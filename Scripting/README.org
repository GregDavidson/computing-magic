* Scripting Notes for Computing Magic

From our [[file:scripting-glossary.org][Scripting Glossary]]

- Scripts :: Programs written in /Scripting Languages/ which are generally
  easier to create, understand and modify than programs written in /General
  Purpose Programming Languages/.

- Scriptable tools :: tools (software or hardware) which can easily be
  controlled by /Scripts/.

Modern scripting emerged from =The Unix Programming Environment= and is a key
part of the power and productivity of =Unix=, =BSD= and =Gnu/Linux=. =POSIX= is
a standard for Unix-derived scriptable tools.
- Note :: Linux is a /Kernel/ which manages the /Computer Hardware/ for a
  Gnu/Linux System. Gnu provides several /User Interfaces/, including a
  traditional /Shell Interface/ along with a rich set of /Scriptable Tools/. We
  will refer to the combination as Gnu/Linux for clarity and to respect its
  developers' wishes.

** Getting the Tools

If you have Unix, Gnu/Linux or BSD you already have the tools or they're
available from a standard package with a simple command.

If you have a Mac you can install the latest tools using [[https://brew.sh/][Homebrew]]
- Versions of these tools which come from Apple are often out of date!

If you have an older μSoft Windows machine, you can install everything using
- [[https://cygwin.com/][Cygwin]].
For a newer μSoft Windows system, you can install μSoft's
- [[https://docs.microsoft.com/en-us/windows/wsl/about][Windows Subsystem for Linux]]
Both of these options are  free of charge and free from commercial licensing!

** Exploring the Posix Command Environment

The first tool you should get is a good [[https://en.wikipedia.org/wiki/POSIX][Posix]] [[https://en.wikipedia.org/wiki/List_of_command-line_interpreters][Shell]]
- All standard Gnu/Linux systems come with [[https://www.gnu.org/software/bash][Gnu Bash]].
- Apple Macintoshes have recently moved from =bash= to [[https://zsh.sourceforge.io][zsh]]
      - =zsh= is similar to =bash=
            - more powerful, but much more complicated!
      - Apple often provides an out-of-date version of =bash=
      - It's a good idea to get an up-to-date =bash= using =homebrew=
         and are moving to =zsh=.
- =bash= and =zsh= are both compatible extensions of [[https://en.wikipedia.org/wiki/Bourne_shell][sh]]
      - It can be better to learn scripting with =sh=
            - Then possibly migrating to, e.g. =bash= or =zsh=

Once you have the basic tools installed on your system, I recommend this fun way
to get started:

- [[https://github.com/mks22-dw/bashcrawl][BASH Crawl - a shell adventure!]]
- [[https://marlborough-college.gitbook.io/attic-lab/the-terminal/games/level-1-bashcrawl][BASH Crawl Intro]]

**  The Unix Toolkit and Philosophy

Once you can run simple commands from a shell, you can move on. It could also be
worth your while to spend some time absorbing the Unix Philosophy, especially in
regards to creative use of the Unix Tools.

A great beginning is to read chapters 1 - 6 of [[https://en.wikipedia.org/wiki/The_Unix_Programming_Environment][The Unix Programming Environment]].
Everything Unix-like since this book was written builds on the foundation it
describes, adding incremental power and convenience but nothing radical. It is
refreshingly free of the (convenient but mostly unnecessary) large number of
features (feature creep) added since that time.
- PROS :: It reveals the power, simplicity and best usage of the tools.
- CONS :: It's somewhat out of date, although nearly everything still works.
Would you be interested in helping bring it up to date?

Tutorials and Guides
- [[http://www.linux-tutorial.info/][The Linux Tutorial]]

More links
- [[https://en.wikipedia.org/wiki/Unix_philosophy][Wikipedia: Unix Philosophy]]

The Unix Philosophy encourages creating a toolkit small simple programs, each of
which has a small functional scope. Problems are solved by combining such
component programs as needed.

The /C Language/ was created to encourage writing this kind of small program. In
fact, when Dennis Ritchie, the main designer of =C= was asked /What's the best
way to write large programs in C?/ his reply was /Don't!/

Most of the popular scripting languages such as Python, Ruby, Perl, JavaScript,
etc. are written primarily in =C=.  =C= is written in =C=.

The Lisp Philosophy encourages creating small simple Procedures (ideally,
Functional Procedures), each of which has a small functional scope. Problems are
solved by combining such component procedures as needed. The major Lisps are
written in Lisp.

The similarities should be obvious. In practice, how do these two approaches
differ?

There have also been a number of Unix-like Toolkits, including shells created in
Lisp. So far, none of them have sufficiently adopted POSIX syntax to allow them
to be used as drop-in replacements for the more common POSIX programs. Some of
them are worth learning and using, e.g. [[https://scsh.net/][scsh - the Scheme Shell]]

* Getting Help From A Command Shell

/Power Users/, people who expect the most from their computer systems, generally
make extensive use of /Command Shells/, programs which allow for the open-ended
execution of diverse programs, the control of those programs and of the ways
that data flows through those programs stage by stage.

Modern /Command Shells/, the /Programs/ they control and the /Operating Systems
and Platforms/ which underlie them have lots of complex features. When you are
working with a /Command Shell/ under a /Posix Operating System/ such as Unix,
BSD, MacOS or Gnu/Linux, a lot of help is readily available to assist you in
managing all of that complexity.

This document is designed to be read interactively, i.e. while you're trying
things out. We assume that you're using the standard /GNU Shell/ =bash=
(compatible with Stephen Bourne's =sh= but with additional features) on a
=GNU/Linux= platform. If instead, you are using, e.g. =zsh= on a =MacOS=
platform, /YMMV/.

As you work though this tutorial we recommend that you take notes about what you
discover and learn!

** Some Simple Commands for Basic Information

In this and following example sessions
- The shell is running in some kind of /Terminal Emulator/ program
- My commands are preceded by the /shell prompt/ "$ "
- with any output on the following line(s)
- and any commentary by me preceded by "# "

#+begin_src bash
$ whatis whatis
whatis (1)           - display one-line manual page descriptions
# 'whatis' just looked up it's own documentation!
# It found its documentation in section 1 of the manual
# (more on sections later) and printed just the 1-line description.
515 $ whatis ps
ps (1)               - report a snapshot of the current processes.
# standard 'ps' will only report on processes associated with
# the same terminal device, by default.
516 $ ps
    PID TTY          TIME CMD
  284123 pts/3    00:00:00 bash
  286490 pts/3    00:00:00 ps
# all processes get a unique PID - Process ID Number
# and an associated TTY - Terminal device for standard Input/Output
# 'ps' found the 'bash' shell which we used to run it
# 'ps' also found itself, but the 'ps' process terminated
# when it finished giving its report
# the 'bash' process gives us a new prompt when its child terminates
$ whatis pwd
pwd (1)              - print name of current/working directory
$ pwd
/Data/Greg/Gits-Ours/computing-magic/Scripting
# All processes are also associated with a directory (aka folder)
# called their "Working Directory" which they inherit from the
# process which created them.  So 'pwd' just showed you its
# working directory which it inherited from our 'bash' shell.
$ whatis ls
ls (1)               - list directory contents
# You can use the command 'ls' to show you the names of all
# files (if any) in the current Working Directory
#+end_src

** Avoiding Information Overload

Modern /Operating Systems/ and many /Programs/ have way more features than you
should try to memorize. Trying to learn too many features at the beginning will
get in the way of understanding the system: you'll be inundated with all the
details of the leaves and you'll miss seeing the structure of the trees, the
forest and the land.

There are handy reference manuals and "cheatsheets" available online which allow
you to easily look up the features you needed for any task at hand. But like a
web search, they can easily present more information than you need and distract
you from that task.

*A Major Piece Of Advice: The +1 Strategy*

Whenever you're consulting any of the reference materials to discover or learn
how to use some features which you need for your current task, try to mostly
ignore everything else you're being shown. Try to only come out with what you
need for your current task, /plus maybe one extra thing/.

The /one extra thing/ should be some additional piece of information which you
either find /especially interesting/ or which you realize will be /especially
useful/ for the kinds of things you often do. Perhaps something which you wish
you'd known sooner, as it could have made your earlier work easier.

If you mostly follow the *+1 Strategy*
- You'll avoid losing your focus on the current task
- Over time, the many +1s will add up!

*Consider Creating Your Own Notes Repository*

When I learn an interesting feature of any complex system, I record it in my
/Notes Repository/. I use /OrgMode/ files under my /Git Repository/ =Notes=
which I keep as a private repository on =GitHub= and as a top-level directory on
all of the devices I use, including my phone! You might prefer to use a
different system for your /Notes Repository/ and that's totally alright!

When I'm not in the middle of a task, I sometimes enjoy reading /Manual Pages/
and other materials to learn more. I add more interesting and useful knowledge
to my /Notes Repository/. I occasionally go selected files in my /Notes
Repository/ too, reviewing, clarifying and pruning out the material I now find
obvious or obsolete.

** Accessing the /Posix Manual Pages/

The /Posix Reference Manual/ consists of concise, one-page /quick reference
documents/ called /Man Pages/. It's divided into 8 sections, documenting all
components of your /Posix System/. The /Posix Reference Manual/ is /NOT/
intended as a Tutorial, but rather to be a quick and efficient Reference, so you
don't have to memorize all the features of each component of your system. You'll
find Tutorials, HOWTOs, etc. elsewhere, e.g. on YouTube or via Web Searches.

*** One-Line Descriptions and Sections

According to the Posix Standard, the /Reference Manual/ should be installed on
your computer and /Section 1/ should have /Man Pages/ on each of the /Programs/
installed on your computer. We'll discuss the other sections shortly.

/Man Pages/ begin with a 1-line description, which can be accessed by the
=whatis= program for super-concise help. So =whatis man= will print a one-line
description of any /Man Page/ named =man=:
#+begin_src bash
$ whatis man
man (7)              - macros to format man pages
man (1)              - an interface to the system reference manuals
# We got two "hits", from sections 1 and 7,
# let's learn about manual sections, with this handy command:
$ whatis intro | sort
intro (1)            - introduction to user commands
intro (2)            - introduction to system calls
intro (3)            - introduction to library functions
intro (4)            - introduction to special files
intro (5)            - introduction to file formats and filesystems
intro (6)            - introduction to games
intro (7)            - introduction to overview and miscellany section
intro (8)            - introduction to administration and privileged commands
# The Posix Reference Manual has 8 standard sections
# (some Posix systems also have subsections)
# and each section has a page called =intro= which explains the
# purpose of that section!
# The = | sort= sorted the output of =whatis intro=.
# This is called a /pipe/ which you will want to learn about,
# but not in this tutorial!
#+end_src

*** Displaying Full Man Pages

Manual pages are generally too long to fit entirely on one terminal window.
=man= will look up the specified /Manual Page/ and then for your convenience,
=man= will run a /Pager Program/ to display the /Manual Page/ for you, one
terminal-sized /Page/ at a time. The most common /Pager Programs/ are =less= and
=more=. When I ask =man= to lookup a /Man Page/, e.g. =man man= to ask =man= to
lookup its own /Man Page/, =man= will find that page and then run =less= on that
page. So when you're reading a /Man Page/ you're not interacting with =man= but
with a /Pager/.

*** Using Pagers such as =more= or =less= to view a textfile

I'll assume we're using =less= although =more= is similar.
- =less= displays the first /Page/ of the document (text file).
- =less= prompts at the bottom of the screen for a /less command/
      - =q= will cause =less= to quit, i.e. terminate
      - SPACEBAR will display the next /Page/
- =less= has /MANY MORE/ commands, too many to memorize!
      - =h= for help will
            - lookup a less command cheat-sheet document
            - run =less= recursively on that document
      - =q= will quit the recursive =less=

Because you'll often be using some /Pager/ program to read textfiles, it's worth
gradually learning more of its features. Assuming that /Pager/ is =less=
- Consult =man less= occasionally
- Study the less cheatsheet using the =less= =h= command
- Learn gradually to avoid Information Overload!

*** Finding Commands and Man Pages

The command =apropos=, equivalent to =man -k= lists /man pages/ by /keyword/ or
/string/, which is helpful for finding the names of commands and other features
as well!

** Man Page Conventions

/Man Pages/ have several conventional internal sections, e.g.
- First Line - man page name and what manual section it's in
- NAME :: single line description of page
- SYNOPSIS :: brief usage information, e.g. command syntax
- DESCRIPTION :: details of each feature
      - for commands, specifics of each option
- and other internal sections
The format of /Man Pages/ is intentionally predictable
- you can skim quickly for what you want
      - once you get used to the conventions

The /Man Pages/ for commands (Section 1) use some conventions to specify syntax
- Optional parts are enclosed [in square brackets]
- Parts that can be repeated are followed by ...
- Underlines indicates where a specific value is required

** Commands, Options, Arguments

The typical syntax of a command is
*name* [OPTIONS] /ARGUMENTS.../

Consider a typical command: =man -s 3 intro=
- =man= is the name of the command
- =-s 3= is an /option/ affecting the command's behavior
- =intro= is an /argument/ for the command to /operate on/
Understanding these conventions helps you understand the commands.

The shell finds the command by its name or a file path
- A few commands are either built-in to the shell
      - Newer shells have dozens of builtin commands
- Most commands are stored as separate files in various directories
      - many of those directories are on your =PATH= variable
      - Run the command =echo $PATH= to see these
            - Another document explains how to customize =PATH=

Options usually begin with "-", occasionally "+"
- Most options are standalone, e.g. =date -I=
- Some options take /Option Arguments/
      - e.g. the =3= in =man -s 3 intro=
- Single letter options can usually be strung together
      - =ls -l -t -r= can be abbreviated =ls -ltr=
- Some options use the /GNU Long Option/ Syntax
      - =uname --processor= is equivalent to =uname -p=
      - Many /GNU Long Options/ have no /Short Option/ equivalent
      - All GNU programs have two important /Long Options/
            - =--version= :: print this program's version
            - =--help= :: print a cheatsheet for this program
- These are just conventions, some programs deviate":
      - =man 3 intro= instead of =man -s 3 intro=
      - =find= and =cc= use a single "-" for long arguments

Often /program arguments/ are names or paths for files or directories, e.g.
- =ls Notes= :: list the contents of directory Notes
- =less Notes/README.org= :: display file README.org in Directory Notes

** Man Pages of Note

Please follow our advice above to avoid Information Overload /and/ here are some
man pages we suggest you browse soon and review from time to time:

Consult =man man= to learn more about man!

When there are /Man Pages/ of the same name in multiple sections, e.g. the many
/Man Pages/ named =intro=, you can specify the desired section number, e.g.

- =man -s 5 intro= :: look up =intro= in section 5
- =man 5 intro= :: simpler, but some Posix systems require the =-s=

So check out the =intro= pages for each section 1 through 8!

Some important, if complex pages:
- =man less= :: if =less= is your preferred /Pager/
- =man hier= :: to learn how the filesystem is structured
- =man bash= :: or whatever shell you prefer

Some ubiquitous commands:
- =man date=
- =man cal=
- =man ls=
- =man uname=
- =man ps=

** Builtin =bash= Commands

Most of the commands you'll run with your shell are not part of the shell. On my
system I have more than 3000 programs stored in more than 20 different
directories.

My =bash=, version 5, has 76 internal (builtin) commands. Since those builtin
commands are not separate programs, they don't have individual /Man Pages/.

The documentation on command built into =bash= is available as part of the
(rather long) =bash= /Man Page/ and the even longer =bash= /GNU Info Document/.

Fortunately, =bash= has the builtin =help= command for listing the basic features of all of its builtin commands:
- =help= gives a cheat sheet of all builtin commands
- =help COMMAND= gives a concise description of the named COMMAND

** The Gnu Info System vs. Web Pages

Richard Stallman, the founder of the GNU Project which created the Gnu/Linux
System (Linux part of a Gnu/Linux System, the /kernel/) didn't like Unix-style
/Man Pages/. He added a =--help= option to all GNU Programs and created a
browsing hypertext system for the complete documenation. That hypertext system
is called /Gnu Info/. Web Pages didn't yet exist, so Richard created something
similar, but simpler, as it had to be simple enough to use in a small terminal
device. (Early Web Pages were similarly constrained, but later added CSS, etc.)

/Gnu Info/ documents can be directly viewed in a terminal with the =info=
command, automatically translated into /Web Pages/ for reading with a /Web
Browser/ or automatically translated into /TeX/ markup for producing a nice
printed document. Not all modern Gnu/Linux systems install /Gnu Info/ documents,
but they're all available via the Web and many people find the Web version more
readable.
- To access (and learn how to use) /Gnu Info/ online
      - just issue the command =info= with no arguments
- To access a specific /Info Document/
      - =info NAME=, e.g. =info bash=
- [[https://www.gnu.org/software/bash/manual/bash.html][Bash Reference Manual on the Web]]

** Terminal Emulators vs. Emacs

Originally people interacted with Shells such as =sh= using a device called a
/terminal/ or /teletype/. /Teletypes/ were electric typewriters connected to a
computer. What you and the computer were typing was being hammered with ink onto
a roll of paper which went through the /teletype/ machine!

Later /Glass Teletypes/ used a CRT Screen instead of paper. You generally got 24
lines of 80 monospaced characters on the CRT Screen.  Richard Stallman designed =emacs= to be able to work on a paper or glass teletype.  On the glass teletype it could split the screen into windows - but they weren't very big!

When higher-resolution graphics screens became available, new ways of issuing
commands became available, including:
- Build special GUI programs which issue the commands for you
      - Often more intuitive but usually functionally limited
- Build programs which emulate a /Glass Teletype/
      - Like the Microsoft "Command Prompt"
      - Many such are available for Posix Systems
- Use =emacs= in Graphics Mode
      - =emacs= Can support multiple Graphical Windows
      - =emacs= Windows can display interactive /Process Buffers/
      - /Process Buffers/ can run traditional terminal-oriented commands
            - Such as Command Shells, SQL Shells, etc.

Many people who use command shells and such prefer the simplicity of terminal
emulators, generally in conjunction with other graphical utilities. Other people
prefer =emacs= for its extensive integrated functionality, despite its long
learning curve. Either way, Command Shells continue to be essential tools for
Power Users!

* Choosing Computer Languages

** Some Criteria for Choosing Languages

Let's use *hack* in the /MIT/ sense, of an ability to bend something to your
will through informed programming. See
- [[http://www.catb.org/esr/jargon/html/H/hacker.html][Jargon: Hacker]]
- [[https://web.archive.org/web/20210812150702/https://hack.org/faq-hacker.html][FAQ: Hacker]]

There at least two important reasons to learn a computer language
- Pragmatic :: It's useful for /hacking/ on important things
- Pedagogical :: Learning it and using it will make you a better /hacker/

In this era of hundreds of useful and interesting languages, we must be even
more discriminating. The languages truly worth our time must be
- Useful :: practically /and/ pedagogically
- Elegant :: minimum complexity and cognitive burden for maximum utility

We can immediately dismiss the [[http://www.paulgraham.com/avg.html][blub languages]] because they lack power and don't
teach us much; indeed, [[https://www.cs.virginia.edu/~evans/cs655/readings/ewd498.html][they can even harm us]] or [[https://nibblestew.blogspot.com/2020/03/its-not-what-programming-languages-do.htmlquality][lead us astray]]! These essays
are old and I'll avoid the mistake of listing today's /blub/ or harmful
languages - they might be languages you currently like! You'll be able to form
your own opinions after gaining experience with some unquestionably excellent
languages.

I generally disregard programmers' opinions about a programming language unless
- they have significant experience using it
      - the way it was designed to be used
      - in ways unanticipated by its designers
- they have significant experience with alternative languages
      - both in the same family and in different families
Opinions of such experienced experts are well worth listening to!

** Some Especially Great Languages

*** TL;DR

For the more complete list and explanation, see /Key Language Inventory/ below.

- [[https://en.wikipedia.org/wiki/Scheme_(programming_language)][Scheme]], inside of [[file:Racket/README.org][Racket]], a modern [[https://github.com/GregDavidson/on-lisp][Lisp]]
      - Scheme is an unusually clean and general language.
            - Scheme is primarily used for learning programming.
      - Racket extends Scheme with practical extensions, libraries, tools and more.
            - Racket is a good general-purpose language.
            - Racket may be an even better language for learning programming.
                  - especially beginning with [[https://docs.racket-lang.org/quick][graphic arts computing]]
- [[Emacs/elisp-vs-scheme.org][Emacs Lisp]], inside of [[https://www.gnu.org/software/emacs][Emacs]]
      - focused on customizing your tool stack
      - there are extraordinary productivity tools written in Emacs Lisp
      - you can easily extend them or write new ones!
- [[file:SQL/SQL-README.org][SQL]], inside of [[https://www.postgresql.org][PostgreSQL]]
      - SQL makes data storage and access a dream
      - PostgreSQL is Open Source Free Software (FLOSS)
      - PostgreSQL allows you to extend SQL and the Database
            - many powerful PostgreSQL extensions are freely available (FLOSS)
            - and you can create magic with your own PostgreSQL extensions!
- [[https://duckduckgo.com/?t=ffab&q=posix+shell][Shell]], inside of [[https://www.gnu.org][Gnu/Linux]] or [[https://duckduckgo.com/?t=ffab&q=macintosh+command+line][Mac]] or [[https://docs.microsoft.com/en-us/windows/wsl/about][Windows Subsystem for Linux]]
      - focused on customizing your tool stack
      - anything you can do manually, you can automated with a /Shell Script/!
- Web Languages
      - [[https://www.typescriptlang.org][TypeScript]] or [[https://clojurescript.org][ClojureScript]]
            - highly dynamic lisp-like languages
            - ideal for animating rich web pages
- [[https://en.wikipedia.org/wiki/Category:Logic_programming_languages][Logic]] [[https://en.wikipedia.org/wiki/Constraint_logic_programming][and]] [[https://en.wikipedia.org/wiki/Constraint_programming][Constraint]] Programming
      - [[file:Prolog/README.org][Prolog]] is the simplest Logic Programming Language
            - excellent for Learning AI Programming Techniques
      - /Constraint Logic Programming/ is extraordinarily powerful
            - many HLLs cater to this style of programming
            - part of the general practice of [[https://en.wikipedia.org/wiki/Automated_reasoning][Automated Reasoning]]
- [[https://en.wikipedia.org/wiki/Knowledge-based_systems][Knowledge-Based]] Programming
      - this paradigm is especially good for creating /Knowledge-Based Expert Systems/
      - good example languages are [[https://flora.sourceforge.net][Flora-2]] and its successor [[https://github.com/ErgoAI][ErgoAI]]

*** Families Of Great Languages

Computer Languages belong to Computer Language Families and are usually
organized around [[https://en.wikipedia.org/wiki/Programming_paradigm][Programming Paradigms]]. Unless there's a pragmatic reason, you
don't need to waste time learning languages which will teach you nothing new.
With experience, you can pick up a language in a familiar family and be
productive in a few hours and masterful in a few days - I stopped counting
languages after I'd used 60 languages for significant projects.

Currently just a list of important languages. More content coming!

**** [[https://github.com/GregDavidson/on-lisp#readme][Lisps]]

The Lisp family contains some of the most flexible general purpose high-level
languages. See [[https://github.com/GregDavidson/on-lisp#readme][On Lisp]] for more depth. Lisps in the Scheme family are among the
most elegant, where elegance refers to a combination of power and simplicity.

- [[https://en.wikipedia.org/wiki/Scheme_(programming_language)][Some Scheme Systems]]
      - [[https://racket-lang.org][Racket]]
      - [[https://www.gnu.org/software/guile][Guile]]
- [[https://clojure.org][Clojure compiles to the JVM]]
      - [[https://clojurescript.org][ClojureScript compiles to JavaScript]]
- [[https://en.wikipedia.org/wiki/Common_Lisp][Common Lisp is the largest Lisp]]
- [[Emacs/elisp-vs-scheme.org][Emacs Lisp is what makes Emacs so powerful]]

**** [[https://en.wikipedia.org/wiki/Category:Logic_programming_languages][Logic]] [[https://en.wikipedia.org/wiki/Constraint_logic_programming][and]] [[https://en.wikipedia.org/wiki/Constraint_programming][Constraint]] Programming

Logic and Constraint programming is the highest-level of Declarative
Programming, i.e. programming where you way what is true in your domain and what
you want (this is called the specification of your problem) and the computer
figures out an effective procedure to compute what you want. Your specification
is typically much smaller than a traditional program and easier to verify. If
your specification is correct, the automatically generated program can only give
correct answers. This is powerful Computing Magic!

- There are [[https://en.wikipedia.org/wiki/Category:Logic_programming_languages][many Logic-Programming Languages]]
      - [[https://en.wikipedia.org/wiki/SWI-Prolog][SWI-Prolog]] - very popular
      - [[https://en.wikipedia.org/wiki/Ciao_(programming_language)][Ciao Prolog]] - also great for constraint logic programming
      - [[https://en.wikipedia.org/wiki/XSB][XSB Prolog]] - the host of Flora-2

**** [[https://en.wikipedia.org/wiki/Knowledge-based_systems][Knowledge-Based]] Programming

In Knowledge-Based Logic Programming you represent the knowledge of a rich
domain with definite and probabilistic rules. The Knowledge Engine uses
automated reasoning to answer your questions and solve your problems. Many
Knowledge-Based Systems have demonstrated human and greater than human
performance in diverse areas, including
- Diagnosis and Treatment of specific Diseases
- Configuration of complex systems
- Interpretation of scientific data
- Symbolic mathematics
- Logistics, Accounting, Tax Preparation
- and on and on

The wide success of Knowledge-Based Systems in the 1980s led to a great deal of
hype along with an explosion of business ventures in this area. Lack of
expertise and poor management produced a flood of poor-quality products which
collapsed confidence in the technology. This was one of the factors in the [[https://en.wikipedia.org/wiki/AI_winter][AI
Winter]]. Many experts are concerned that the current hype for [[https://en.wikipedia.org/wiki/Machine_learning][Machine Learning]]
may lead to another collapse. [[https://en.wikipedia.org/wiki/Hybrid_intelligent_system][Hybrid AI Systems]] combine the technology of
Knowledge-Based Systems with Machine Learning to overcome the limitations of the
limitations of each individual technology.

Knowledge-Based Programming is a natural extension of Constraint Logic
Programming

Many frameworks have been created for Knowledge-Based Programming
- [[https://en.wikipedia.org/wiki/Flora-2][Wikipedia: Flora-2]], [[http://flora.sourceforge.net/][Flora-2 Website]]

**** Systems Programming Languages

Systems Programming is the art of writing programs which directly control
hardware devices, called device drivers and programs which directly control
the low-level systems abstractions provided by operating system kernels, e.g.
- Filesystems
- File and Network Streams
- Packet Switching
- Low-level Graphics and Audio
- etc.

- [[https://github.com/GregDavidson/C-By-Example#readme][C]] is the lowest-level popular language
      - C is great for learning how computers work
- [[https://www.rust-lang.org][Rust]] is a remarkably flexible and elegant systems programming language
      - higher-level than C
      - simpler and more reliable than C++
      - advanced features for control of resources
      - great for parallelism, utilizing multiple CPUs and GPUs

**** Relational Programming

All data in primary memory (RAM) is volatile and is erased when a program
terminates, whether that was planned, caused by a crash or by a power loss.
Secondary memory (SSDs, HDDs) will persist without power but are 1000 to
1,000,000 times slower than primary memory. Database systems are the most
powerful and flexible ways of managing persistent storage. Most Database Systems
follow the Relational Model and use the standard query language SQL.

- [[SQL/SQL-README.org][SQL]]

**** Some Truly Extraordinary Languages

***** [Array-Oriented Languages

The Iverson family of Languages use elegant compact notations allowing for
remarkably short and powerful programs. These languages are very powerful and
practical for many kinds of programming. They are especially good for building
intuitions which open the power of multidimensional arrays which can then be
exploited in any language.

- APL is famous for its use of special characters
      - Try [[https://mlochbaum.github.io/BQN][BQN for a modern alternative]]
- [[https://www.jsoftware.com][J]] uses regular characters in a very compact notation

***** Smalltalks

The Smalltalk languages are a very pure expression of the ideal of dynamic
Object Oriented Languages. They are especially good for art and multi-media
simulations. They will teach you how to think in the Object Oriented paradigm
which you can then use in other languages.

- [[https://squeak.org][Squeak Smalltalk]] is the most popular
- [[ttps://pharo.org][Pharo Smalltalk]] is the most elealternative
-
***** [Typed Functional Languages

Haskell is the poster-child for developing programs by first expressing
the types and relationships in the program.  Haskell will teach you powerful
ways of thinking about programming and how to create programs that are much
more reliable than usual.

- [[https://www.haskell.org][Haskell]]

**** Web and XML Languages

- JavaScript
      - TypeScript adds Haskell-like typing to JavaScript
      - [[https://clojurescript.org][ClojureScript]] is a Lisp which compiles to JavaScript

**** Web and Document Languages

- [[https://en.wikipedia.org/wiki/HTML5][HTML5]]
      - [[https://html.spec.whatwg.org/multipage/][Features]] and [[https://www.w3.org/TR/][Standards]]
      - CSS
- [[https://en.wikipedia.org/wiki/XML][XML]], [[https://en.wikipedia.org/wiki/XHTML][XHTML]], [[https://en.wikipedia.org/wiki/XSLT][XSLT]]
- [[https://orgmode.org][OrgMode]], [[https://en.wikipedia.org/wiki/TeX][ΤΕΧ]], [[https://www.libreoffice.org/discover/what-is-opendocument/][Open Document]]

**** Shells and [[https://en.wikipedia.org/wiki/Domain-specific_language][Domain Specific Languages]]

Shells allow both casual users and experts to create scripts which
automate computer tasks, controlling other applications.

Domain Specific Languages, DSLs, especially those coming out of the Software
Tools movement associated with Unix are especially powerful for specific texts,
especially where the data is in the form of text in files and streams.

Shells
- [[https://en.wikipedia.org/wiki/Bourne_shell][sh: Bourne Shell]], [[https://www.gnu.org/software/bash][Bash]], [[https://en.wikipedia.org/wiki/Z_shell#External_links][zsh]]

Text-Oriented DSLs
- [[https://en.wikipedia.org/wiki/Regular_expression][Regular Expressions]]
      - [[https://en.wikipedia.org/wiki/Grep][grep: Global Regular Expression Print]]
- [[https://en.wikipedia.org/wiki/Ed_(text_editor)][ed scriptable scripting editor]]
- [[https://en.wikipedia.org/wiki/Sed][sed scriptable stream editor]]
- [[https://en.wikipedia.org/wiki/AWK][awk powerful scriptable text processor]]

Automated development tools are like Shells for Shells
- [[https://en.wikipedia.org/wiki/Make_(software)][make: automate file processing]]

** Comparing Languages

The [[https://rosettacode.org/wiki/Category:Programming_Languages][Rosetta Code]] site has brief explanations and examples of over 900
programming languages. Choice of language can have a big impact on ease of
solving various kinds of problems.

Choice of language can also have a big impact on [[https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html][how fast your programs run]] and
other performance criteria.

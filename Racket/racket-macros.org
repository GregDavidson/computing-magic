* Scheme Macros and Special Forms

You can study Racket Macros in the Racket Guide
- https://docs.racket-lang.org/guide/macros.html
- But it's pretty difficult to understand!

tl;dr
- It's great that there are some built-in Special Forms
- Most of which are Macros
- *You probably shouldn't create any more macros!*

** Why You Should Avoid Creating Macros

A lot of books, articles, videos, etc. tell you that
- *Macros are wonderful!*
- Macros are one of Lisp's /Killer Features/!
- Macros will make your programs much better!
- *This is NOT TRUE!*

- Each macro definition creates a new /Special Form/.
- Each /Special Form/ behaves in a /special way/
- You have to do /extra work/ to understand code with any /Special Forms/!
      - Find and study its documentation (if any)
      - Find and study a macro's source code
            - which can be hard to understand!

And there's almost never any advantage to new macros
- The existing Special Forms are almost always sufficient

Just write regular procedures.  If you need to control evaluation
- Quote data with ' or quote
      - ~'(hello world)~        ; with the ' reader macro suger
      - ~(quote (hello world))~ ; same thing without the sugar
- Quote code with λ or lambda
      - ~(maybe-yell (λ () (displayln "Ai Yai Yai!"))~

 #+begin_src scheme
   (define (maybe-yell yell)
     (display "Please enter two integers: ")
     (let ( [x (read)] [y (read)] )
       (if (and (integer? x) (integer? y))
           (printf "They sum to ~a\n" (+ x y))
           (yell) ) ) )
 #+end_src

** What's a Special Form

A Special Form is any Form which deviates from Normal Evaluation

** What's Normal Evaluation

FIRST: All elements of a form are evaluated
- The first element must evaluate to a procedure value
- The rest evaluate to the arguments for the procedure

SECOND: the procedure value is "applied" to its arguments
- a temporary nested environment is created
- and extended with the procedure's parameters bound to the arguments
- then the procedure's body is evaluated in that environment

*** Example Normal Form Evaluation

#+begin_src racket
  #lang scheme
  (define (sum-of-squares x y) (+ (* x x) (* y y)))

  (sum-of-squares 3 4)
#+end_src

Evaluate ~(sum-of-squares 3 4)~ in top-level environment
- Evaluate each element
      - ~sum-of-squares~ => ~(λ x y) (+ (* x x) (* y y))~
      - 3 => 3
      - 4 => 4
- Apply ~(λ x y) (+ (* x x) (* y y))~ to ~(3 4)~
- An temporary nested environment is created
      - It's nested, so + and * are still bound to the usual procedures
      - But we add bindings for ~(x . 3)~ and ~(y . 4)~
- Evaluate ~(+ (* x x) (* y y))~ in nested environment
      - Evaluate each element
      - ~+~ => ~<addition procedure>~
      - Evaluate ~(* x x)~ in nested environment
            - Evaluate each element
                  - ~*~ => ~<multiplcation procedure>~
                  - ~x~ => 3
                  - ~x~ => 3
            - Apply ~<multiplication procedure>~ to ~(3 3)~
      - => 9
      - ~(* y y)~ => 16 similarly
      - Apply ~<addition procedure>~ to ~(9 16)~
      - => 25

** Why Is Normal Evaluation Ever A Problem?

*Example: define forms*

If define were a regular procedure in
#+begin_src scheme
(define c (circle 10))
#+end_src
then c would be evaluated BEFORE define was applied to it
- We'd be trying to evaluate c BEFORE it was defined!
So define has to suppress the evaluation of its first argument

Define also gives us syntactic sugar for defining functions
#+begin_src scheme
(define (square n) (filled-rectangle n n))
#+end_src

Which Macro Expansion turns into
#+begin_src scheme
(define square (lambda (n) (filled-rectangle n n)))
#+end_src

*Example: let forms*

It turns out that define, let and let* can all be implemented through macro
expansion as described in the program [[https://github.com/GregDavidson/on-lisp/blob/main/lambda-sugar.rkt][lambda-sugar.rkt]].
- For global defines this would mean enclosing the whole program in a λ form
- In practice simple defines usually expand to a built-in special form

** What's A Macro?

A form is a macro if
- the first element of the form is a symbol
- which was defined to be a macro

Macro forms are evaluated before normal evaluation
- there's a /macro transformer/ procedure associated with the macro
- which translates the macro form into a different expression
- This is called *Macro Expansion*
      - It's recursive, since forms can be nested
      - It's also iterative, since the expansion might introduce new macros!

Macro Expansion is done before your code runs
- E.g. When your program is compiled to native code
- Macro Expansion doesn't slow your program down
- The code which runs when your program runs is the fully Expanded Code!

** How Are Scheme Macros Special?

You're really unlikely to ever need to know these things
- but *if you must* know
- *read on!*

*** How Most Lisps Do It

Lisp programs are just a series of Symbolic Expressions.

Lisp has the functions and control structures that make it easy to
- decompose an S-Expression into parts
- create different S-Expressions from those parts

Here's an ordinary scheme function doing this without any special machinery. It
doesn't create a macro, but it shows the idea without the complications we're
about to get into.

#+begin_src racket :results output
  #lang scheme
  (define (define-transformer define-form)
    (define (reject) (error (format "bad define-form ~a" define-form)))
    (when (< (length define-form) 3) (reject))
    (let ( [head (cadr define-form)] [body (cddr define-form)] )
      (cond [(symbol? head)
             (when (not (= 1 (length body))) (reject))
             `(set ',head ,@body)]
            [(and (list? head) (symbol? (car head)))
             `(set ',(car head) (lambda ,(cdr head) ,@body))]
            [#t (reject)] ) ) )

  (displayln (define-transformer '(define greeting "hello world")))
  (displayln (define-transformer '(define (greet name) (format "Hello ~a, how do you do?" name))))
#+end_src

RESULTS:
- ~(set (quote greeting) hello world)~
- ~(set (quote greet) (lambda (name) (format Hello ~a, how do you do? name)))~

For convenience, traditional lisps provide a special form which
1. Defines the new symbol as a marker for a special form
2. Does some usually helpful deconstruction of the original form

Here's a simplified example in Emacs Lisp
- put error checking back in if you really want this!

#+begin_src elisp :results output
  (defmacro define (head body)
      (cond ((symbolp head) `(set ',head ,body))
            ((and (consp head) (symbolp (car head)))
             `(set ',(car head) (lambda ,(cdr head) ,body)) ) ) )

  (print (macroexpand '(define greeting "hello world")))
  (print (macroexpand '(define (greet name) (format "Hello ~a, how do you do?" name))))
#+end_src

RESULTS:
- ~(set 'greeting "hello world")~
- ~(set 'greet (lambda (name) (format "Hello ~a, how do you do?" name)))~

*** Scheme Is Fancier!

Remember our general advice:
- Don't write macros unless there's going to be a big payoff!
- There's almost never a need for more macros!

So you almost certainly don't need to know any of this stuff. But in the rare
case you need it, or the much more likely case that you're simply perversely
interested, here's an executive overview!

Scheme Family Lisps (such as Racket) use a special data type called a [[https://docs.racket-lang.org/guide/stx-obj.html][Syntax
Object]] to represent forms for Macro Expansion. [[https://beautifulracket.com/explainer/syntax-objects.html][Syntax Objects]] enclose the
Symbolic-Expression of the Form along with additional information that could
inform the macro transformation procedure how to do a better job. Syntax Objects
allow macro transformation to be more nuanced. But they could also make it
harder to write such transformers.

For convenience, Scheme Family Lisps provide at least two ways to define a macro
transformer
- (define-syntax-rules pattern template) :: using pattern matching
- (define-syntax name procedure) :: using an arbitrary procedure

Most macros can be defined with [[https://docs.racket-lang.org/guide/pattern-macros.html][Pattern-Based Macros]]
#+begin_src racket :results output
  #lang racket
  ;; define a racket which swaps the values of two variables
  (define-syntax-rule (swap x y)
    (let ([tmp x])
      (set! x y)
      (set! y tmp) ) )
  ;; use it like this
  (define a 'hello)
  (define b 'goodbye)
  (swap a b)
  (displayln a) ; prints 'goodbye
  (displayln b) ; prints 'hello
#+end_src

#+RESULTS:
: goodbye
: hello

But if we learned the fancier system, we could provide additional features, e.g. error checking and reporting
#+begin_src racket
  #lang racket
  (define-syntax (swap stx)
    (syntax-case stx ()
      [(swap x y)
       (if (and (identifier? #'x)
                (identifier? #'y))
           #'(let ([tmp x])
               (set! x y)
               (set! y tmp))
           (raise-syntax-error #f
                               "not an identifier"
                               stx
                               (if (identifier? #'x)
                                   #'y
                                   #'x)))]))
#+end_src


There are convenience functions such as
- ~syntax-case~ :: does pattern matching against a syntax object
- ~raise-syntax-error~ :: extracts location information from a syntax object to
  produce a more useful error message

Hey, you said I won't ever need to write any macros, but I want to be able to do
things like swapping variables without having to create stupid temporary
variables.

Okay, no macros are needed:
#+begin_src racket :results output
  #lang racket
  (define a 'hello)
  (define b 'goodbye)
  (set!-values (b a) (values a b))
  (displayln a) ; prints 'goodbye
  (displayln b) ; prints 'hello
#+end_src

#+RESULTS:
: goodbye
: hello

Compared to our ~swap~ macro
- this is more efficient
- and can be adapted to other situations
      - more than two values
      - values coming from arbitrary sources
      - see also ~define-values~

Macros, schmacros!

** Other Special Forms

Not all Special Forms are macros!

All Lisp systems need to have a small number of built-in Special Forms, typically
- ~quote~ for suppressing evaluation
- Either ~lambda~ or ~λ~ for creating procedures
      - the other can be a macro
- either ~if~ or ~cond~ for making decisions
      - only one needs to be a built-in
      - all other conditional constructs can be macros

** Reader Macros

Special Forms are still Forms
- They must be enclosed in parentheses [or brackets in Racket]
- And begin with a reserved symbol

What if you'd like something shorter?
- Reader Macros can abbreviate a feature to 1 or 2 characters!

The Lisp Reader, typically the procedure ~read~, reads Symbolic-Expressions
- It can read them as data
- It is also used to read your program!

Can you tell ~read~ to treat some characters specially?
- Maybe to expand them into certain Special Forms?
- Of course!

As an extreme example, you could completely redefine the ~read~ function
- That's part of how people create new Racket Languages with non-lisp syntaxes

Lisp Readers encode a lot of knowledge
- The syntax of all atom literals
- How to parse nested lists and other container types
- How to ignore comments
- To expand 'x to (quote x) for any expression x
- etc.

Most programming languages reserve most ASCII special characters
- Programmers can't use special characters for their own purposes 😞

Lisp family languages leave most special characters alone
- Lisp programmers are free to use them as they like! 😀

Lisp manages to do without many special characters by overloading #.
- # doesn't mean anything by itself
- # begins most special Reader features
- The following character determines what the feature means
- Most Lisp dialects have lots of Reader Macros beginning with #.

Check out some of the features of [[https://docs.racket-lang.org/reference/reader.html][The Racket Reader]]!

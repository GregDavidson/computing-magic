* Macro-Based Record (aka Struct/Structure) Types

** The Idea

- Note :: What some dialects of Lisp (and other computer languages) call a
Record, other dialects and languages call a structure - and the latter
often abbreviate structure as struct.  Currently we're using Record
for the concept and struct for a representation of such.
- Also note :: the idea of Object-Oriented Programming is based on the
  idea of Records and the Objects which are Class Instances are
  definitely Structures!

#+begin_src scheme
  (struct/macro
    macro-name {super-name}*
    ( {field-name {type}? {field-feature}*}* )
    {struct-feature}* )
#+end_src

Defines /macro-name/ as a macro which manages a new record-type, providing
- constructor :: (macro-name #:new {value}*)
- predicate :: (macro-name value)
- selector /for each field/ :: (macro-name record-value field-name)
- mutator-procedure :: (macro-name record-value field-name new-value)
      - for fields with *field-feature* /mutable/
      - for all fields of records with *record-type-feature* /mutable/
      - /returning old value/

- Additional fields are "inherited" from any super-names.
      - these must have already been created by struct/macro

Unless otherwise specified, these records are syntactic sugar for vectors.

** Example

#+begin_src racket
  #lang racket
  (require racket/function)
  ;; Define structure type person
  (struct/macro person
                ( [name string?] [interests (listof symbol?)] )
                #:vector i)
  ;; Using the person constructor person:
  (define john (person: "John Doe" '(rationality possibility)))
  ;; person predicate and selectors
  (when (person? john)
    (printf "~a is interested in ~a\n"
            (person john name) (person john interests) ) )
  ;; person predicate and selectors
  (when (person? john)
    (printf "~a is interested in ~a\n"
            (person john name) (person john interests) ) )
  ;; which is equivalent to
  (when (person? john)
    (call-with-values
                      (λ () (person name interests))
                      (curry printf "~a is interested in ~a\n") ) )
#+end_src

Possible equivalences or alternatives
- person? :: person #:isa
- person: :: person #:new
  
Possible additional features
- (person! person-expression {field-name value}...) :: modify some fields if structure is mutable
  - compare with ~(set-person-name! john "Grocho Marx")~
- (person! person-expression {field-name #:update: update-function}...) :: modify with an update-function
- (person! person-expression {field-name #:update: update-function}...) :: modify with an update-function
  - cou
- (person #:from person-expression {field-name value}..?) :: new from old with 0 or more replacement values
  - compare with [[https://docs.racket-lang.org/reference/struct-copy.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._struct-copy%29%29][Racket's struct-copy]]


** Closely Related Links

See also *References* below

- [[file:struct-macro.rkt][struct-macro.rkt]]
  

** Implementation Notes

Metaprogramming Features
- to allow for inheritance, etc.
- list fields :: (macro-name #:fields)
      - expands to the field list from the definition

Let's start out simple
- (struct/macro macro-name field-list . features)

#+begin_src racket
#lang racket/base
(require racket/contract)
(require racket/stream)

(define/contract (stream-andmap-2 f seq0 seq1)
  (-> procedure? stream? stream? boolean?)
  (define this 'stream-andmap-2)
  (let loop ( [s0 seq0] [s1 seq1] )
    (cond [(and (null? s0) (null? s1)) #t]
          [(or (null? s0) (null? s1))
           (error this "irregular streams ~a and ~a" seq0 seq1) ]
          [(not (f (stream-first s0) (stream-first s1))) #f]
          [#t (loop (stream-rest s0) (stream-rest s1))] ) ) )
#+end_src

#+begin_src racket
             (define-syntax (define-record-macro stx0)
             (syntax-parse stx0
               [(_ record-macro-name:id record-fields:list . record-features)
                (let* ( [field-datums (syntax->datum record-fields)]
                        [record-datums (syntax->datum record-fields)]
                       [field-names (map (λ (field)
                                           (syntax-parse field
                                             [field:id field]
                                             [(field:id . _) field] ) )
                                          (syntax->datum record-fields))
                       [field-types (map (λ (field)
                                           (syntax-parse field
                                             [field:id #f]
                                             [(field:id field-type . _) field-type] ) )))
                       [field-features (map (λ (field)
                                              (syntax-parse field
                                                [field:id '()]
                                                [(field:id _ . features) #'features] ) )))
                       [field-mutable (map (λ (features) (member #:mutable  features)]
                                           field-features )]
                       [all-mutable (member #:mutable  #'record-features)]
                       [vector-ctor (if (or all-mutable (map-or identity field-mutable))
                                          #'vector #'vector-immutable )] )
                  #'(define-syntax (#'record-macro-name stx)
                      [(_ #:new . stx-args)
                       #:fail-unless (= (length stx-args) (length #'record-fields))
                       "Number of values must match number of fields"
                       #'(let ( [args #'(cons vector stx-args)] )
                           (sequence-map (λ (elem-name) computation) seq-v)
                           (error 'robust-for/list5 "Expected list, given ~e"
                                  seq-v ) ) ]

                      ]))
#+end_src

** References

Really close to what I am trying to do:
- https://www.reddit.com/r/Racket/comments/zxprws/building_a_macrodefining_macro_in_racket/

Nice Introductions
- https://www.gavinmcg.com/2016/02/03/racket-macros.html

Advanced macros
- https://school.racket-lang.org/2019/plan/tue-mor-lecture.html

My article on Racket Macros which spends more time explaining why they're best avoided:
- [[file:../racket-macros.org][racket-macros.org]]

** Possible Future Features

*** Other representation types

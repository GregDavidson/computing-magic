* RacketPad: Racket Constraint Composite Pictures and Graphics Library

** What it Is

Sutherland's SketchPad and Alan Borning's ThingLab based on Racket's Pict
Library.

** Approach

Combine Racket's Pict (and maybe MetaPict and other components) with Racket's
Constraint Satisfaction Library.

** Problems
*** Racket's Constraint Satisfaction Library is unmaintained???

*** Racket's Pict object have fixed dimensions

Racket's =pict= is an excellent object-centered functional graphics system.
- Objects can be trees of sub-objects.
- Alas, they have fixed sizes.

Proposed Solution
- Use inheritance as in SketchPad and ThingLab.
- Any Racket Pict or other graphical object is just a base to inherit from.
- Base object properties can be overridden in the derived object
      - e.g. with a constraint variable!
- Couple the existing rendering mechanisms to the new system
      - generalize the =pict= accessor functions

This solution would also allow us to use other Racket entities as base objects,
whether or not they were designed for graphical display! And this includes our
first implementation of fixed-size data structure diagrams!

In order to have things be as Functional as possible, and to allow backtracking,
etc. during constraint satisfaction, the parameters need to live in an
environment loosely associated with the graphical objects to be rendered.

** Original Thoughts

Ideally it would be possible to
- create composite pictures as
- a tree where
      - the leaves are =pict=s
      - the internal nodes are constraints
      - free variables represent parameters
            - possibly with defaults

Composite pictures would allow functional operations
- adding new pictures (leaves)
- adding new constraints (as or to interior nodes)

Constraint expressions and parameter values could be
- added to a composite picture
- and/or supplied at rendering time

A representation is needed for constraint expressions.
- Let's try following the existing Racket constraint solver's syntax!

To what extent are Racket's =pict= objects size-independent?
- Especially text =pict= objects?

Some notions:

Make Composite Picts usable anywhere that
- A single =pict= would be usable
- A stream of =pict= would be usable

Allow a stream of composite picts to act like
- a functionally updatable sequence
- using a special interior node

Provide labels for parts of composite picts
- when functional updates create new trees
- labels reference homologous parts

Perhaps a composite picture needs
- a top-of-picture index of
  - labels
  - anything else?

Successful function updates and rendering requires
- unification
- constraint solving

The composite picture would only be rendered when
- the application needs to present it
- all of the parameters are available

When a size constraint provides insufficient room for parts of a picture
- it should provide a ellipsis function
- default ellipsis functions should be available

Detection of constraint issues needs to be
- noticeable as early as possible
- checkable on demand before rendering

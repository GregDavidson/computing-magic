#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1448 0 28 3 15 #"#lang slideshow"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/format"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; * diapic - a Racket diagramming toolkit"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; Shall we use S-Exprs to structure our diagrams?"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Shall we use a purely functional approach?"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Let's use Streams:"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; - Lists are automatically accepted as Streams"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; - Arrays, Strings, Sequences & more can be wrapped as Streams"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Shall we use typed/racket?"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Maybe eventuallly, but not yet!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; ** Calculating Sizes"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"max1"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 2 #") "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Find the maximum width, height, length of a stream of pictures"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"max-pics-width-height"
0 0 24 3 1 #" "
0 0 14 3 4 #"pics"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:width"
0 0 24 3 2 #" ["
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"] "
0 0 23 3 8 #"#:height"
0 0 24 3 2 #" ["
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"] "
0 0 23 3 5 #"#:len"
0 0 24 3 2 #" ["
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"stream-empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"pics"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ["
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-first"
0 0 24 3 1 #" "
0 0 14 3 4 #"pics"
0 0 24 3 4 #")] ["
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stream-rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"pics"
0 0 24 3 4 #")] )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 21 #"max-pics-width-height"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 4 #"rest"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 23 3 7 #"#:width"
0 0 24 3 2 #" ("
0 0 14 3 4 #"max1"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pict-width"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 23 3 8 #"#:height"
0 0 24 3 2 #" ("
0 0 14 3 4 #"max1"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 2 #" ("
0 0 14 3 11 #"pict-height"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 23 3 5 #"#:len"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 8 #")) ) ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 26 #"test-max-pics-width-height"
0 0 24 3 2 #" ["
0 0 14 3 4 #"pics"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #"))] "
0 0 23 3 7 #"#:width"
0 0 24 3 2 #" ["
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"] "
0 0 23 3 8 #"#:height"
0 0 24 3 2 #" ["
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 10 #"let-values"
0 0 24 3 5 #" ( [("
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 21 #"max-pics-width-height"
0 0 24 3 1 #" "
0 0 14 3 4 #"pics"
0 0 24 3 4 #")] )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"width ~a height ~a length ~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #") ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 26 #"test-max-pics-width-height"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; ** Labels for Objects"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; We want labels to be able to label"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; - a complete object"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; - a field of a structure"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; - an element of a vector"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-pic"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"pict?"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 2 #") "
0 0 14 3 6 #"labels"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"char?"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 3 #") ("
0 0 14 3 9 #"label-pic"
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 3 #") ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 3 #") ("
0 0 14 3 9 #"label-pic"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~a"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"stream?"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 3 #") ("
0 0 14 3 9 #"label-pic"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-first"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 5 #"] ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"label-next"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"stream?"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 3 #")) "
0 0 14 3 6 #"labels"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 1 #"t"
0 0 24 3 2 #" ("
0 0 14 3 13 #"sequence-tail"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #")] ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; ** Composing and labeling Objects"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pic+label"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 2 #" ("
0 0 14 3 9 #"vc-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-pic"
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 3 #")) "
0 0 14 3 1 #"p"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"box-pic"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:label"
0 0 24 3 2 #" ["
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ["
0 0 14 3 3 #"box"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cc-superimpose"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 5 #"))] )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pic+label"
0 0 24 3 1 #" "
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 5 #") ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Incorporate width height!!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"frame-pic"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:label"
0 0 24 3 2 #" ["
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ["
0 0 14 3 3 #"box"
0 0 24 3 2 #" ("
0 0 14 3 5 #"frame"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 4 #")] )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pic+label"
0 0 24 3 1 #" "
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 5 #") ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Wrap a pic in a box or frame"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; Either sized just right or of the specified sizes"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; and perhaps with a label outside of the box."
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Without explicit sizing,"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";   the box will be sized to the interior picture"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; A wider label may boost the size!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"boxed-pic"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:width"
0 0 24 3 2 #" ["
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 8 #"#:height"
0 0 24 3 2 #" ["
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 7 #"#:skosh"
0 0 24 3 2 #" ["
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 23 3 7 #"#:label"
0 0 24 3 2 #" ["
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"] ["
0 0 14 3 4 #"wrap"
0 0 24 3 1 #" "
0 0 14 3 7 #"box-pic"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ["
0 0 14 3 7 #"and-max"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 3 #")) "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 5 #"gloss"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-pic"
0 0 24 3 1 #" "
0 0 14 3 5 #"label"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 11 #"gloss-width"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 5 #"gloss"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pict-width"
0 0 24 3 1 #" "
0 0 14 3 5 #"gloss"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 7 #"and-max"
0 0 24 3 1 #" "
0 0 14 3 11 #"gloss-width"
0 0 24 3 2 #" ("
0 0 14 3 7 #"and-max"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 2 #" ("
0 0 14 3 10 #"pict-width"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"h"
0 0 24 3 2 #" ("
0 0 14 3 7 #"and-max"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 2 #" ("
0 0 14 3 11 #"pict-height"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 3 #"box"
0 0 24 3 2 #" ("
0 0 14 3 4 #"wrap"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 1 #"h"
0 0 24 3 4 #")] )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 5 #"gloss"
0 0 24 3 2 #" ("
0 0 14 3 9 #"vc-append"
0 0 24 3 1 #" "
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 5 #"gloss"
0 0 24 3 2 #") "
0 0 14 3 3 #"box"
0 0 24 3 5 #") ) )"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Mystery: When the vl-append arguments are reversed,"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; the top line of the boxes does not show,"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; even in tests where there should be no label!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"test-boxed-pic"
0 0 24 3 2 #" ["
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Hello world!\""
0 0 24 3 3 #")] "
0 0 23 3 7 #"#:width"
0 0 24 3 2 #" ["
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 8 #"#:height"
0 0 24 3 2 #" ["
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 7 #"#:skosh"
0 0 24 3 2 #" ["
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"] "
0 0 23 3 7 #"#:label"
0 0 24 3 2 #" ["
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"boxed-pic"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"  "
0 0 23 3 7 #"#:width"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:height"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:skosh"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"value\""
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"test-boxed-pic"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Append a Stream of Pictures into a new composite Picture"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"append-pics"
0 0 24 3 1 #" "
0 0 14 3 4 #"pics"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:append"
0 0 24 3 2 #" ["
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 9 #"hc-append"
0 0 24 3 2 #"] "
0 0 23 3 7 #"#:skosh"
0 0 24 3 2 #" ["
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ["
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream->list"
0 0 24 3 1 #" "
0 0 14 3 4 #"pics"
0 0 24 3 4 #")] )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 11 #"extra-width"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 4 #"args"
0 0 24 3 6 #")) ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; ** Transforming Sequences"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Recursively rebuild a stream"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Possibly transforming through a mapping function"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";   which function might possibly want an index or label"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Possibly appending to an existing stream"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"stream-rebuild"
0 0 24 3 1 #" "
0 0 14 3 2 #"ss"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:map"
0 0 24 3 2 #" ["
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 6 #"#:tail"
0 0 24 3 2 #" ["
0 0 14 3 4 #"tail"
0 0 24 3 2 #" ("
0 0 14 3 6 #"stream"
0 0 24 3 3 #")] "
0 0 23 3 7 #"#:index"
0 0 24 3 2 #" ["
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"stream-empty?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ss"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"tail"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ["
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-first"
0 0 24 3 1 #" "
0 0 14 3 2 #"ss"
0 0 24 3 4 #")] ["
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stream-rest"
0 0 24 3 1 #" "
0 0 14 3 2 #"ss"
0 0 24 3 4 #")] )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 11 #"stream-cons"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 3 #") ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 3 #")) "
0 0 14 3 5 #"first"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"stream-rebuild"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:tail"
0 0 24 3 1 #" "
0 0 14 3 4 #"tail"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:index"
0 0 24 3 2 #" ("
0 0 14 3 10 #"label-next"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 10 #")) ) ) ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Explode a string into a Stream"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Possibly transforming through a mapping function"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; Possibly appending to an existing list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"explode-string"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:map"
0 0 24 3 2 #" ["
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 6 #"#:tail"
0 0 24 3 2 #" ["
0 0 14 3 4 #"tail"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"stream-rebuild"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sequence->stream"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-string"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 23 3 5 #"#:map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:tail"
0 0 24 3 1 #" "
0 0 14 3 4 #"tail"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"append-pics"
0 0 24 3 2 #" ("
0 0 14 3 14 #"explode-string"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Hello!\""
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 23 3 5 #"#:map"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 9 #"boxed-pic"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 23 3 7 #"#:skosh"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 23 3 6 #"#:tail"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"boxed-pic"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"\\\\0\""
0 0 24 3 2 #") "
0 0 23 3 7 #"#:skosh"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; Building Composite Objects"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Transform a sequence of elements into a sequence of boxed pics"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; of the same width and height"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; - the max of the sizes of their constituents"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; - plus a skosh around the width inside the boxes"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; - optionally adding indices underneath"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"boxed-elements"
0 0 24 3 1 #" "
0 0 14 3 8 #"elements"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:index"
0 0 24 3 2 #" ["
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 7 #"#:skosh"
0 0 24 3 2 #" ["
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 10 #"let-values"
0 0 24 3 5 #" ( [("
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 21 #"max-pics-width-height"
0 0 24 3 1 #" "
0 0 14 3 8 #"elements"
0 0 24 3 4 #")] )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ["
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 9 #"boxed-pic"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:width"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:height"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:skosh"
0 0 24 3 1 #" "
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 9 #"boxed-pic"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:width"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:height"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:skosh"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 7 #")) )] )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"stream-rebuild"
0 0 24 3 1 #" "
0 0 14 3 8 #"elements"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:index"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 7 #") ) ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; Transform a string into a sequence of boxed elements"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"boxed-chars"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:null"
0 0 24 3 2 #" ["
0 0 14 3 8 #"add-null"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 7 #"#:index"
0 0 24 3 2 #" ["
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 7 #"#:skosh"
0 0 24 3 2 #" ["
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ["
0 0 14 3 4 #"tail"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 8 #"add-null"
0 0 24 3 2 #" ("
0 0 14 3 6 #"stream"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"\\\\0\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 8 #"elements"
0 0 24 3 2 #" ("
0 0 14 3 14 #"explode-string"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:map"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #"))) "
0 0 23 3 6 #"#:tail"
0 0 24 3 1 #" "
0 0 14 3 4 #"tail"
0 0 24 3 4 #")] )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"boxed-elements"
0 0 24 3 1 #" "
0 0 14 3 8 #"elements"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:index"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:skosh"
0 0 24 3 1 #" "
0 0 14 3 11 #"extra-width"
0 0 24 3 5 #") ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Transform a string into a contiguous array of boxed characters as "
 #"obove"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string-diagram"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:null"
0 0 24 3 2 #" ["
0 0 14 3 8 #"add-null"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 7 #"#:index"
0 0 24 3 2 #" ["
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"append-pics"
0 0 24 3 2 #" ("
0 0 14 3 11 #"boxed-chars"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:null"
0 0 24 3 1 #" "
0 0 14 3 8 #"add-null"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:index"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"string-diagram"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Hello!\""
0 0 24 3 1 #" "
0 0 23 3 6 #"#:null"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"string-diagram"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Hello!\""
0 0 24 3 1 #" "
0 0 23 3 6 #"#:null"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:index"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"boxed-fields"
0 0 24 3 1 #" "
0 0 14 3 6 #"fields"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:labels"
0 0 24 3 2 #" ["
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 7 #"#:skosh"
0 0 24 3 2 #" ["
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 10 #"let-values"
0 0 24 3 5 #" ( [("
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 21 #"max-pics-width-height"
0 0 24 3 1 #" "
0 0 14 3 6 #"fields"
0 0 24 3 4 #")] )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ["
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 9 #"boxed-pic"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:height"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:skosh"
0 0 24 3 1 #" "
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:label"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 9 #"boxed-pic"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:height"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:skosh"
0 0 24 3 1 #" "
0 0 14 3 11 #"extra-width"
0 0 24 3 8 #")) ) ] )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"stream-rebuild"
0 0 24 3 1 #" "
0 0 14 3 6 #"fields"
0 0 24 3 1 #" "
0 0 23 3 5 #"#:map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:index"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 7 #") ) ) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"record-diagram"
0 0 24 3 1 #" "
0 0 14 3 6 #"fields"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:labels"
0 0 24 3 2 #" ["
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"] "
0 0 23 3 7 #"#:skosh"
0 0 24 3 2 #" ["
0 0 14 3 11 #"extra-width"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"append-pics"
0 0 24 3 2 #" ("
0 0 14 3 12 #"boxed-fields"
0 0 24 3 1 #" "
0 0 14 3 6 #"fields"
0 0 24 3 1 #" "
0 0 23 3 8 #"#:labels"
0 0 24 3 1 #" "
0 0 14 3 6 #"labels"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:skosh"
0 0 24 3 1 #" "
0 0 14 3 11 #"extra-width"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"field-names"
0 0 24 3 2 #" ("
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"greeting\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"storage\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"record-diagram"
0 0 24 3 2 #" ("
0 0 14 3 6 #"stream"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 24 3 3 #") ("
0 0 14 3 14 #"string-diagram"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Hello!\""
0 0 24 3 1 #" "
0 0 23 3 6 #"#:null"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")) "
0 0 23 3 8 #"#:labels"
0 0 24 3 1 #" "
0 0 14 3 11 #"field-names"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"record-diagram"
0 0 24 3 2 #" ("
0 0 14 3 6 #"stream"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 24 3 3 #") ("
0 0 14 3 14 #"string-diagram"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Hello!\""
0 0 24 3 1 #" "
0 0 23 3 6 #"#:null"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 23 3 7 #"#:index"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 23 3 8 #"#:labels"
0 0 24 3 1 #" "
0 0 14 3 11 #"field-names"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; ** What's next?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; *** Use more pict constructors"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; frame instead of superposing rectangles?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; Indicating space between different complete objects?"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; - blank constructor?"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; - unboxed ellipsis?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; pin-arrow-line for pointers"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; *** Quality"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; Taking into account the width of labels in computing the width of "
 #"array elements"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; *** Constraint Satisfaction"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; https://docs.racket-lang.org/csp/index.html#%28tech._constraint._s"
 #"atisfaction._problem%29"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; New Plan:"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; (1) Create data structures for pick documents"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; (2) Nodes can have constraints"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";   - Either on that node's pict or on the children of that node"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";   - Bounding size"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";   - "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; *** Misc"
0 0 24 29 1 #"\n"
0           0

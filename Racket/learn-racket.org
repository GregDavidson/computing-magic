* Learning More & Better Racket

** What is Racket and Why is Racket Special?

In Computing we call something /elegant/ when it achieves great power with
minimal complexity.

Racket is one of the most /elegant/ modern programming languages and
environments.

- Racket started out as a fleshed-out variant of Scheme
      - Scheme was primarily a teaching language
      - Racket added features needed for practical programming
- Racket provides extensive tools and libraries
- Racket provides a system for creating new languages
      - Customized to a specific domain
      - With special syntax and semantics
      - Use one or more Racket Languages to solve complex problems
- Racket is all /Open Source Free Software!/

** Paths to Learning (More) Racket?

Racket is best learned by Exploring, that is to say
1. Read a bit about it, e.g. from a Tutorial or other Guidebook
2. Replicate the examples or similar examples
3. Experiment a bit beyond the examples
4. Look up a few things in the Reference Manual
5. Repeat with step 1!

** A Fast Path for Learning Racket

Here's a good Tutorial Path
1. Follow the tutorial [[https://docs.racket-lang.org/quick/][Quick: An Introduction to Racket with Pictures]]
2. Explore the [[Tutorial-1-Pictures/after-quick.rkt][after-quick.rkt]] program
3. Read and Explore [[https://github.com/GregDavidson/on-lisp/blob/main/lisp-simplicity.org][Lisp Simplicity]]
4. Possibly explore more materials in the [[https://github.com/GregDavidson/on-lisp#readme][On Lisp]] repository
5. Explore [[http://www.htdp.org/][How to Design Programs]]
6. Explore the other [[https://docs.racket-lang.org][Racket Tutorials]]
   - especially [[https://docs.racket-lang.org/more/index.html][More: Systems Programming with Racket]]
7. Explore other [[https://docs.racket-lang.org/index.html][Racket Resources]]
8. Pull ideas from [[https://docs.racket-lang.org/guide/index.html][The Racket Guide]]

If you'd like to understand Racket (and Scheme) macros really well
- I recommend Greg Hendershott's /excellent/ tutorial [[https://www.greghendershott.com/fear-of-macros][Fear of Macros]]!
- Scheme-Family macros are /much more powerful/ than macros in other Lisps!

** An alternative Path via Writing Games in Racket

*** Realm of Racket

Realm of Racket is a book and a curriculum
- [http://realmofracket.com/

Realm of Racket has you
- Write a series of game programs
- the games gradually increase in sophistication
- writing each game teaches you more skills

[[https://www.youtube.com/@realmofracket/videos][Short and kinda silly Realm of Racket Videos]]

*** Eric Clack's Example Games

Study the games at Eric Clack's wonderful [[https://github.com/ericclack/racket-examples#racket-examples][racket-examples]] repository
- He provides the series of versions in the development of each game!
- git clone https://github.com/ericclack/racket-examples.git
- For each game
      - Run the final version, then some earlier versions
      - For each version, from first to last
            - Study the code and its evolution
            - Make sure you understand how everything works
      - Modify the last version in ways that you find interesting
- Using your new understanding, write some cool games!

You can follow this path and also add material in the /Fast Path/ above!

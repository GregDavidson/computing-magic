* Learning More & Better Racket

** What Is Racket and Why Is Racket Special?

In Computing we call something [[https://en.wikipedia.org/wiki/Mathematical_beauty][elegant]] when it achieves great power with minimal
complexity.

[[https://racket-lang.org][Racket]] is one of the most /elegant/ modern programming languages and
environments.

- Racket started out as a fleshed-out variant of [[https://www.scheme.org][Scheme]]
      - [[https://en.wikipedia.org/wiki/Scheme_(programming_language)][Scheme]] was primarily a research and teaching language
      - Racket added features needed for practical programming
- Racket provides [[https://docs.racket-lang.org][extensive tools and libraries]]
- Racket provides a system for creating new languages
      - Customized to a specific domain
      - With special syntax and semantics
      - Use the best Racket Language for each Module of a complex system
            - Racket links the Modules together into your solution!
- Racket is all [[https://download.racket-lang.org/license.html][Open Source]] [[https://en.wikipedia.org/wiki/Free_software][Free Software]]!

** Racket is best learned by Exploring

1. Read a bit about it, e.g. from a Tutorial or other media
2. Replicate the examples
3. Experiment beyond the examples
4. Look up interesting or mysterious features in the [[https://docs.racket-lang.org/guide/index.html][Guide]] or [[https://docs.racket-lang.org/reference/index.html][Reference]]
5. Create some notes about what you found
6. Repeat with step 1!

** A Path for Learning Racket

1. Work through the module [[file:~/Gits/Computing-Magic/Modules/Module-1][Acquiring A Lisp]]
2. Explore the [[file:Tutorial-1-Pictures/after-quick.rkt][after-quick.rkt]] program
3. Assimilate this [[https://learnxinyminutes.com/docs/racket][Racket Overview Tutorial]]
4. Read and Explore [[https://github.com/GregDavidson/on-lisp/blob/main/lisp-simplicity.org][Lisp Simplicity]]
5. Possibly explore more materials in the [[https://github.com/GregDavidson/on-lisp#readme][On Lisp]] repository
6. Work through [[http://www.htdp.org/][How to Design Programs]]
7. Work through the other [[https://docs.racket-lang.org][Racket Tutorials]]
       - especially [[https://docs.racket-lang.org/more/index.html][More: Systems Programming with Racket]]
8. Explore other [[https://docs.racket-lang.org/index.html][Racket Resources]]
9. Pull ideas from [[https://docs.racket-lang.org/guide/index.html][The Racket Guide]]

** Another Path - via Creating Game Programs in Racket

Designing and creating computer games is one of the best all-around paths to
learning diverse computing skills. We have a whole module which takes this path:

[[file:../Modules/Module-1c/README.org][Module 1c: Creating Games With Racket]]

** More Great Resources for Learning Racket

Master Racket (and Scheme) Macros!
- I recommend Greg Hendershott's /excellent/ tutorial [[https://www.greghendershott.com/fear-of-macros][Fear of Macros]]!
- Scheme-Family macros are /much more powerful/ than macros in other Lisps!

[[https://dev.to/goober99/learn-racket-by-example-gui-programming-3epm][Learn Racket with Examples of Graphical User Interfaces]]
- Learn to create programs with beautiful Graphical User Interfaces!

Learn [[https://web.mit.edu/racket_v612/amd64_ubuntu1404/racket/doc/ts-guide/][Typed Racket]]!
- Add compile-time checked types to some of your other programs
- Good typing will prevent many kinds of bugs in your programs
- The Types also deepen your understanding of your programs

[[https://github.com/zyrolasting/racket-koans/tree/master#readme][Racket Koans: Make these programs pass their Unit Tests!]]
- Hone your Racket understanding through these programming puzzles!
- Unit Tests can automate program testing

Ideally you'll use Typed/Racket plus Unit Tests to
- Improve the design of your programs
- Eliminate nearly all bugs

Typed/Racket Macros can examine types at compile time allowing for advanced
metaprogramming - short simple programs which automatically expand into custom
code!

Create your own programming languages with [[https://beautifulracket.com/][Beautiful Racket]]
- This is a (non-free) book
- and a website full of excellent free articles

** Mix and Match and tell us what you liked best!

You can mix and match these different resources.

It would be great to hear from you what resources you found most helpful
- and why!
